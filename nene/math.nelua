require 'nene.core'
require 'math'

global Nene.Math = @record{}
local Math = @Nene.Math

local Vec2 = @record{
  x: number,
  y: number
}
global Nene.Math.Vec2 = @Vec2
## Vec2.value.is_vec = true

global Vec2.zero: Vec2 = { x = 0, y = 0}

function Vec2.__eq(l: Vec2, r: Vec2): boolean
  return l.x == r.x and l.y == r.y
end

function Vec2.__len(v: Vec2): number
  return math.sqrt( (v.x * v.x) + (v.y * v.y) )
end

function Vec2.__add(l: Vec2, r: Vec2): Vec2
  return (@Vec2){ x = l.x + r.x, y = l.y + r.y }
end

function Vec2.__sub(l: Vec2, r: Vec2): Vec2
  return (@Vec2){ x = l.x - r.x, y = l.y - r.y }
end

function Vec2.__mul(l: Vec2, r: overload(Vec2, number)): Vec2
  ## if r.type.is_arithmetic then
    return (@Vec2){ x = l.x * r, y = l.y * r }
  ## else
    return (@Vec2){ x = l.x * r.x, y = l.y * r.y }
  ## end
end

function Vec2.__div(l: Vec2, r: Vec2): Vec2
  return (@Vec2){ x = l.x / r.x, y = l.y / r.y }
end

function Vec2.__unm(v: Vec2): Vec2
  return (@Vec2){ x = -v.x, y = -v.y }
end

function Vec2.dot(l: Vec2, r: Vec2): number
  return l.x * r.x + l.y * r.y
end

function Vec2.normalized(v: Vec2): Vec2
  local r: Vec2 = Vec2.zero

  local v_len = #v
  if v_len ~= 0 then
    r = { x = v.x / v_len, y = v.y / v_len }
  end

  return r
end

## local decl_rect = function(name, T)
  ## staticassert(T.value.is_arithmetic, 'T is not arithmetic')

  local T: type = #[T]#

  local RectT = @record{
    x: T,
    y: T,
    w: T,
    h: T
  }
  global Math.#|name|# = RectT

  function RectT:get_intersection(other_rect: RectT): RectT
    local max_px = math.max(self.x, other_rect.x)
    local max_py = math.max(self.y, other_rect.y)
    local min_xw = math.min(self.x + self.w, other_rect.x + other_rect.w)
    local min_yh = math.min(self.y + self.h, other_rect.y + other_rect.h)

    local pmin: Vec2 = { max_px, max_py }
    local pmax: Vec2 = { min_xw, min_yh }

    return (@RectT){
      x = pmin.x, y = pmin.y,
      w = math.abs(pmax.x - pmin.x), h = math.abs(pmax.y - pmin.y)
    }
  end

  function RectT:is_point_intersecting(point: Vec2): boolean
    return (
      point.x >= self.x and
      point.x <= self.x + self.w and
      point.y >= self.y and
      point.y <= self.y + self.h
    )
  end

  function RectT:is_rect_intersecting(other: RectT): boolean
    local intersection_test = self:get_intersection(other)
    local test_point: Vec2 = { intersection_test.x, intersection_test.y }
    return self:is_point_intersecting(test_point) and other:is_point_intersecting(test_point)
  end

  function RectT:get_center(): Vec2
    return (@Vec2){
      x = self.x + (self.w / 2),
      y = self.y + (self.h / 2),
    }
  end

  ## RectT.value.is_rect = true
## end

## decl_rect('Rectf', number)
## decl_rect('Rect', integer)

function Math.Rectf:to_rect(): Math.Rect
  return (@Math.Rect){
    x = math.ifloor(self.x), y = math.ifloor(self.y),
    w = math.ifloor(self.w), h = math.ifloor(self.h)
  }
end

function Math.Rect:to_rectf(): Math.Rectf
  return (@Math.Rectf){
    x = self.x, y = self.y,
    w = self.w, h = self.h
  }
end
