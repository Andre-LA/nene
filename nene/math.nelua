require 'math'

global Math = @record{}

global Math.Vec2 = @record{
  x: number,
  y: number
}

local Vec2 = @Math.Vec2
## Vec2.value.is_vec = true

function Math.Vec2.__eq(a: Vec2, b: Vec2): boolean
  return a.x == b.x and a.y == b.y
end

function Math.Vec2.__add(a: Vec2, b: Vec2): Vec2
  return (@Vec2){ x = a.x + b.x, y = a.y + b.y }
end

function Math.Vec2.__sub(a: Vec2, b: Vec2): Vec2
  return (@Vec2){ x = a.x - b.x, y = a.y - b.y }
end

function Math.Vec2.__mul(a: overload(Vec2, number), b: overload(Vec2, number)): Vec2
  ## if a.type.is_vec and b.type.is_vec then -- both are vectors
    return (@Vec2){ x = a.x * b.x, y = a.y * b.y }
  ## elseif a.type.is_arithmetic then -- b is a vector
    return (@Vec2){ x = b.x * a, y = b.y * a }
  ## else
    return (@Vec2){ x = a.x * b, y = a.y * b }
  ## end
end

function Math.Vec2.__div(a: Vec2, b: Vec2): Vec2
  return (@Vec2){ x = a.x / b.x, y = a.y / b.y }
end

function Math.Vec2.__unm(v: Vec2): Vec2
  return (@Vec2){ x = -v.x, y = -v.y }
end

function Math.Vec2.lerp(a: Vec2, b: Vec2, t: number): Vec2
  return (1.0 - t) * a + t * b
end

function Math.Vec2.len_sqr(v: Vec2): number
  return (v.x * v.x) + (v.y * v.y)
end

function Math.Vec2.__len(v: Vec2): number
  return math.sqrt(Vec2.len_sqr(v))
end

function Math.Vec2.dot(a: Vec2, b: Vec2): number
  return a.x * b.x + a.y * b.y
end

function Math.Vec2.normalized(v: Vec2): Vec2
  local result: Vec2;

  local v_len = #v

  if v_len ~= 0.0 then
    result = { x = v.x / v_len, y = v.y / v_len }
  end

  return result
end

## local decl_rect = function(name, T)
  ## staticassert(T.value.is_arithmetic, 'T is not arithmetic')

  local T: type = #[T]#

  global Math.#|name|# = @record{
    x: T,
    y: T,
    w: T,
    h: T
  }

  local RectT = @Math.#|name|#

  function RectT:get_intersection(other_rect: RectT): RectT
    local max_px = math.max(self.x, other_rect.x)
    local max_py = math.max(self.y, other_rect.y)
    local min_xw = math.min(self.x + self.w, other_rect.x + other_rect.w)
    local min_yh = math.min(self.y + self.h, other_rect.y + other_rect.h)

    local pmin: Vec2 = { max_px, max_py }
    local pmax: Vec2 = { min_xw, min_yh }

    return (@RectT){
      x = pmin.x, y = pmin.y,
      w = math.abs(pmax.x - pmin.x), h = math.abs(pmax.y - pmin.y)
    }
  end

  function RectT:is_point_intersecting(point: Vec2): boolean
    return (
      point.x >= self.x and
      point.x <= self.x + self.w and
      point.y >= self.y and
      point.y <= self.y + self.h
    )
  end

  function RectT:is_rect_intersecting(other: RectT): boolean
    local intersection_test = self:get_intersection(other)
    local test_point: Vec2 = { intersection_test.x, intersection_test.y }
    return self:is_point_intersecting(test_point) and other:is_point_intersecting(test_point)
  end

  function RectT:get_center(): Vec2
    return (@Vec2){
      x = self.x + (self.w / 2),
      y = self.y + (self.h / 2),
    }
  end

  ## RectT.value.is_rect = true
## end

## decl_rect('Rectf', number)
## decl_rect('Rect', integer)

function Math.Rectf:to_rect(): Math.Rect
  return (@Math.Rect){
    x = math.ifloor(self.x), y = math.ifloor(self.y),
    w = math.ifloor(self.w), h = math.ifloor(self.h)
  }
end

function Math.Rect:to_rectf(): Math.Rectf
  return (@Math.Rectf){
    x = self.x, y = self.y,
    w = self.w, h = self.h
  }
end

--[[
This record is intended to generate rectangles from an infinite grid. This grid is mathematical, it doesn't really exists.
]]
global Math.Grid = @record{
  rect_size: record{ width: integer, height: integer }, -- the size of the rectangles
  gap: record{ x: integer, y: integer } -- the gap between rectagles
}
local Grid = @Math.Grid

--[[
Generates the rectangle from the grid mathematically. Both the first `column` and `row` are `0` and not `1`.
]]
function Math.Grid.gen_rect(self: Grid, column: integer, row: integer): Math.Rect
  return (@Math.Rect){
    x = self.rect_size.width * column + self.gap.x * column,
    y = self.rect_size.height * row + self.gap.y * row,
    w = self.rect_size.width,
    h = self.rect_size.height,
  }
end

--[[
Returns the the column and row from a `n`th cell, note that this function is 0-indexed (so, the first cell is `0`, not `1`).

Is necessary to also give how many cells fit on a line.
]]
function Math.Grid.get_nth_cell_column_row(n: isize, cells_per_line: isize): (isize, isize)
  return n % cells_per_line, n // cells_per_line
end
