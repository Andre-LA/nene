-- TODO:
-- review this module with proper math algorithms

require 'nene.core'
require 'math'

global Nene.Math = @record{}

global Nene.Math.Vec2 = @record{
  x: number,
  y: number
}

local Vec2 = Nene.Math.Vec2
## Vec2.value.is_vec2 = true

function Nene.Math.Vec2.__len(v: Nene.Math.Vec2): number
  return math.sqrt( (v.x * v.x) + (v.y * v.y) )
end

function Nene.Math.Vec2.__add(l: Nene.Math.Vec2, r: Nene.Math.Vec2): Nene.Math.Vec2
  return (@Nene.Math.Vec2){ x = l.x + r.x, y = l.y + r.y }
end

function Nene.Math.Vec2.__sub(l: Nene.Math.Vec2, r: Nene.Math.Vec2): Nene.Math.Vec2
  return (@Nene.Math.Vec2){ x = l.x - r.x, y = l.y - r.y }
end

function Nene.Math.Vec2.__mul(l: Nene.Math.Vec2, r: overload(Nene.Math.Vec2, number)): Nene.Math.Vec2
  ## if r.type.is_arithmetic then
    return (@Nene.Math.Vec2){ x = l.x * r, y = l.y * r }
  ## else
    return (@Nene.Math.Vec2){ x = l.x * r.x, y = l.y * r.y }
  ## end
end

function Nene.Math.Vec2.__div(l: Nene.Math.Vec2, r: Nene.Math.Vec2): Nene.Math.Vec2
  return (@Nene.Math.Vec2){ x = l.x / r.x, y = l.y / r.y }
end

## local decl_rect = function(name, T)
  ## staticassert(T.value.is_arithmetic, 'T is not arithmetic')

  local T: type = #[T]#

  global Nene.Math.#|name|# = @record{
    x: T,
    y: T,
    w: T,
    h: T
  }
  local RectT = Nene.Math.#|name|#

  function RectT:get_intersection(other_rect: RectT): RectT
    local max_px = math.max(self.x, other_rect.x)
    local max_py = math.max(self.y, other_rect.y)
    local min_xw = math.min(self.x + self.w, other_rect.x + other_rect.w)
    local min_yh = math.min(self.y + self.h, other_rect.y + other_rect.h)

    local pmin: Nene.Math.Vec2 = { max_px, max_py }
    local pmax: Nene.Math.Vec2 = { min_xw, min_yh }

    return (@RectT){
      x = pmin.x, y = pmin.y,
      w = math.abs(pmax.x - pmin.x), h = math.abs(pmax.y - pmin.y)
    }
  end

  function RectT:is_point_intersecting(point: Nene.Math.Vec2): boolean
    return (
      point.x >= self.x and
      point.x <= self.x + self.w and
      point.y >= self.y and
      point.y <= self.y + self.h
    )
  end

  function RectT:is_rect_intersecting(other: RectT): boolean
    local intersection_test = self:get_intersection(other)
    local test_point: Nene.Math.Vec2 = { intersection_test.x, intersection_test.y }
    return self:is_point_intersecting(test_point) and other:is_point_intersecting(test_point)
  end

  function RectT:get_center(): Nene.Math.Vec2
    return (@Nene.Math.Vec2){
      x = self.x + (self.w / 2),
      y = self.y + (self.h / 2),
    }
  end

  ## RectT.value.is_rect = true
## end

## decl_rect('Rectf', number)
## decl_rect('Rect', integer)

function Nene.Math.Rectf:to_rect(): Nene.Math.Rect
  return (@Nene.Math.Rect){
    x = math.ifloor(self.x), y = math.ifloor(self.y),
    w = math.ifloor(self.w), h = math.ifloor(self.h)
  }
end

function Nene.Math.Rect:to_rectf(): Nene.Math.Rectf
  return (@Nene.Math.Rectf){
    x = self.x, y = self.y,
    w = self.w, h = self.h
  }
end
