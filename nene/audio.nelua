require 'nene.wrappers.mix'
require 'nene.core'

local MixWrapper = MixWrapper

-- Wraps a (SDL_mixer) sound associated with a sound channel
global Sound = @record{
  _data: *Mix_Chunk, -- internal data, don't use it directly, use methods instead
  channel: integer, -- -1 when no channel is being used
}

--[[
It checks if the internal data is `nilptr` and then returns it.

Related SDL_mixer documentation:
* [Mix_Chunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_85.html#SEC85)
]]
function Sound:get(): *Mix_Chunk
  check(self._data ~= nilptr, 'Sound.get: Sound internal data is `nilptr`')
  return self._data
end

--[[
try to load a sound from a file.

it returns:
* `Sound` value, with internal data properly initialized if load is successful
* a boolean which is `true` when the load succeeds.

Related MixWrapper documentation:
* [MixWrapper.load_wav](wrappers/mix.md#mixwrapperload_wav)
]]
function Sound.load(filename: string): (Sound, boolean)
  local sound_data, ok = MixWrapper.load_wav(filename)

  local new_sound: Sound = {
    _data = sound_data,
    channel = -1
  }

  return new_sound, ok
end

--[[
plays the loaded sound.
* if `true` is passed on `loop` argument, the sound will loop forever;
* if an `integer` is passed, the sound will loop `loop` times
* if `nil` is passed, it will play only one time.

When there is no sound loaded (that is, the internal data is `nilptr`), then this method
does nothing, though it also `check`s if the internal is `nilptr` (unless the `nochecks` pragma is enabled)

Related MixWrapper documentation:
* [MixWrapper.play_channel](wrappers/mix.md#mixwrapperplay_channel)
]]
function Sound:play(loop: overload(boolean, integer, niltype))
  local data = self:get()

  if data ~= nilptr then
    local loops = 0

    ## if loop.type.is_boolean then
      loops = loop and -1 or 0
    ## elseif loop.type.is_integral then
      loops = Äºoop
    ## end

    self.channel = MixWrapper.play_channel(-1, data, loops)
  end
end

--[[
Halts (stop, interrupt) the sound.

Related MixWrapper documentation:
* [MixWrapper.halt_channel](wrappers/mix.md#mixwrapperhalt_channel)
]]
function Sound:stop()
  if self.channel >= 0 then
    MixWrapper.halt_channel(self.channel)
    self.channel = -1
  else
    warn'Sound.stop: trying to stop an uninitialized sound'
  end
end

--[[
Destroy the sound, it will first stop it and then free the sound's memory.

Related MixWrapper documentation:
* [MixWrapper.free_chunk](wrappers/mix.md#mixwrapperfree_chunk)
]]
function Sound:destroy()
  local data = self:get()

  self:stop()

  MixWrapper.free_chunk(data)
  self._data = nilptr
end

-- Wraps a (SDL_mixer) music
global Music = @record{
  _data: *Mix_Music,
}

--[[
It checks if the internal data is `nilptr` and then returns it.

Related SDL_mixer documentation:
* [Mix_Music](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_86.html#SEC86)
]]
function Music:get(): *Mix_Music
  check(self._data ~= nilptr, 'Music.get: Music internal data is `nilptr`')
  return self._data
end

--[[
Destroy the music, it will halts it if playing, it also wait if it's still fading out.

Related MixWrapper documentation:
* [MixWrapper.free_music](wrappers/mix.md#mixwrapperfree_music)
]]
function Music:destroy()
  local data = self:get()

  MixWrapper.free_music(data)
  self._data = nilptr
end
