require 'nene.wrappers.mix'
require 'nene.core'

global Nene.Sound = @record{
  _data: *Mix_Chunk,
  channel: integer, -- -1 when no channel is being used
}

--- plays the sound.
--- * if `true` is passed on `loop` argument, the sound will loop forever;
--- * if an `integer` is passed, the sound will loop `loop` times
--- * if `nil` is passed, it will play one time, but it will not loop.
---
--- Related SDL_mixer documentation:
--- * [Mix_PlayChannel](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_28.html#SEC28)
--- * [Mix_Chunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_85.html#SEC85)
function Nene.Sound:play(loop: overload(boolean, integer, niltype))
  check(Nene.initialized, 'Nene is not initialized')
  check(self._data ~= nilptr, 'Cannot play a nilptr sound')
  local loops = 0

  ## if loop.type.is_boolean then
    loops = loop and -1 or 0
  ## elseif loop.type.is_integral then
    loops = Äºoop
  ## end

  self.channel = Mix_PlayChannel(-1, self._data, loops)
end

--- stops the sound
---
--- Related SDL_mixer documentation:
--- * [Mix_HaltChannel](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_34.html#SEC34)
--- * [Mix_Chunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_85.html#SEC85)
function Nene.Sound:stop()
  check(Nene.initialized, 'Nene is not initialized')

  if self.channel >= 0 then
    Nene.MixWrapper.halt_channel(self.channel)
    self.channel = -1
  else
    warn'Nene.Sound.stop: trying to stop an uninitialized sound'
  end
end

--- Destroy the sound, it will first stop it and then free the sound's memory.
---
--- Related SDL_mixer documentation:
--- * [Mix_FreeChunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_24.html#SEC24)
--- * [Mix_Chunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_85.html#SEC85)
function Nene.Sound:destroy()
  check(Nene.initialized, 'Nene is not initialized')
  check(self._data ~= nilptr, 'free: cannot free a nilptr sound')

  self:stop()

  Nene.MixWrapper.free_chunk(self._data)
  self._data = nilptr
end

global Nene.Music = @record{
  _data: *Mix_Music,
  id: usize,
}

--- Destroy the music, it will halts it if playing, it also wait if it's still fading out.
---
--- Related SDL_mixer documentation:
--- * [Mix_FreeMusic](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_56.html#SEC56)
--- * [Mix_Music](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_86.html#SEC86)
function Nene.Music:destroy()
  check(Nene.initialized, 'Nene is not initialized')
  Nene.MixWrapper.free_music(self._data)
  self._data = nilptr
end
