local Nene = require 'nene'

require 'nene.raw.sdl2_mixer'

require 'nene.macros'
## local warn_msg = macros.warn_msg

local Audio = @record{}

-- Wraps a (SDL_mixer) sound associated with a sound channel
local Sound = @record{
  _data: *Mix_Chunk, -- internal data, don't use it directly, use methods instead
  channel: integer, -- -1 when no channel is being used
}

global Audio.Sound = Sound

--[[
Returns the `pointer(Mix_Chunk)` internal data.

It also [`check`](https://nelua.io/libraries/#check)s if the internal data is `nilptr`.

Related SDL_mixer documentation:
* [Mix_Chunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_85.html#SEC85)
]]
function Sound:get_raw(): *Mix_Chunk
  check(self._data ~= nilptr, 'Sound.get: Sound internal data is `nilptr`')
  return self._data
end

--[[
try to load a sound from a file.

Returns an `ok` status with `true` value and an sound if successful.

Related SDL_mixer documentation:
* [Mix_LoadWAV](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_19.html)
]]
function Sound.load(filename: string): (boolean, Sound)
  local raw_sound = Mix_LoadWAV(filename)

  if not raw_sound then
    warn_msg!('Sound.load', 'could not load the sound file', 'Mix_GetError')
    return false, (@Sound)()
  end

  local new_sound: Sound = {
    _data = raw_sound,
    channel = -1
  }

  return true, new_sound
end

--[[
plays the loaded sound.
* if `true` is passed on `loop` argument, the sound will loop forever;
* if an `integer` is passed, the sound will loop `loop` times
* if `nil` is passed, it will play only one time.

When there is no sound loaded (that is, the internal data is `nilptr`), then this method
does nothing, though it also `check`s if the internal is `nilptr` (unless the `nochecks` pragma is enabled)

Returns an `ok` status with `true` value if successful.

Related SDL_mixer documentation:
* [Mix_PlayChannel](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_28.html)
]]
function Sound:play(loop: overload(boolean, integer, niltype)): (boolean)
  local raw_sound = self:get_raw()

  if raw_sound ~= nilptr then
    local loops = 0

    ## if loop.type.is_boolean then
      loops = loop and -1 or 0
    ## elseif loop.type.is_integral then
      loops = Äºoop
    ## end

    self.channel = Mix_PlayChannel(-1, raw_sound, loops)
    if self.channel == -1 then
      warn_msg!('Sound.play', 'could not play the sound', 'Mix_GetError')
      return false
    end
  else
    warn('Sound.play: sound is uninitialized, run a non-release build with nochecks pragma disabled')
    return false
  end

  return true
end

--[[
Halts (stop, interrupt) the sound.

Related SDL_mixer documentation:
* [Mix_HaltChannel](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_34.html)
]]
function Sound:stop()
  if self.channel >= 0 then
    Mix_HaltChannel(self.channel)
    self.channel = -1
  end
end

--[[
Destroy the sound and resets to zeroed state,

> Note: It will first stop the sound and then free the sound's memory.

Related SDL_mixer documentation:
* [Mix_FreeChunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_24.html)
]]
function Sound:destroy()
  local raw_sound = self:get_raw()
  self:stop()
  Mix_FreeChunk(raw_sound)
  $self = (@Sound)()
end

-- Wraps a (SDL_mixer) music
local Music = @record{
  _data: *Mix_Music,
}

global Audio.Music = Music

--[[
Returns the `pointer(Mix_Music)` internal data.

It also [`check`](https://nelua.io/libraries/#check)s if the internal data is `nilptr`.

Related SDL_mixer documentation:
* [Mix_Music](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_86.html#SEC86)
]]
function Music:get_raw(): *Mix_Music
  check(self._data ~= nilptr, 'Music.get_raw: Music internal data is `nilptr`')
  return self._data
end

--[[
Load music file.

Related SDL_mixer documentation:
* [Mix_Music](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_86.html#SEC86)
* [Mix_LoadMUS](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_55.html)
]]
function Music.load(filename: string): (boolean, Music)
  local raw_music = Mix_LoadMUS(filename)

  if not raw_music then
    warn_msg!('Music.load', 'could not load music file', 'Mix_GetError')
    return false, (@Music)()
  end

  local new_music: Music = {
    _data = raw_music
  }

  return true, new_music
end

--[[
Plays the music (forever by default), note that this stops any playing music.

You can also pass a `loop` argument, this makes the music loop `loop` times, also note that:
* Passing `0` will make it play the music `0` times.
* Passing `1` will make it only once.
* Passing `-1` will make it looping forever, this is the default value.

Related SDL_mixer documentation:
* [Mix_PlayMusic](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_57.html)
]]
function Music:play(loops: facultative(integer))
  ## if loops.type.is_niltype then
  local loops: cint = -1
  ## end

  local raw_music = self:get_raw()
  Mix_PlayMusic(raw_music, loops)
end

--[[
Stops any playing music.

Related SDL_mixer documentation:
* [Mix_HaltMusic](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_67.html)
]]
function Music.stop()
  Mix_HaltMusic()
end

--[[
Destroy the music and resets to zeroed state.

> Note: SDL_mixer first halts (stops) the music if it's playing, it also wait if it's still fading out.

Related SDL_mixer documentation:
* [Mix_FreeMusic](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_56.html)
]]
function Music:destroy()
  local raw_music = self:get_raw()
  Mix_FreeMusic(raw_music)
  $self = (@Music)()
end

return Audio
