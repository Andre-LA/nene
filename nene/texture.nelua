require 'sdl2'

require 'nene.math'

--- just a wrap of SDL_Texture, the `_data` field
--- should never be directly accessed, instead, use
--- the methods, which do checks
global Nene.Texture = @record{
  _data: *SDL_Texture,
  width: uinteger,
  height: uinteger,
  initialized: boolean,
}

--- get the internal data
function Nene.Texture:get(): *SDL_Texture
  check(self ~= nilptr, 'Texture is nilptr')
  check(self._data ~= nilptr, "Texture doesn't points to any loaded resource")
  return self._data
end

--- free the internal data
function Nene.Texture:free()
  check(self._data ~= nilptr, "There is no sdl texture to be freed")

  SDL_DestroyTexture(self._data)

  self._data = nilptr
  self.initialized = false
end

--- draw the texture with the `color` tint at the `destination` (which can be a position, a rectangle, or `nil` which will draw at the whole screen),
--- you can optionally pass the `source` rectangle if you want to draw a slice of the texture.
--- However, you need pass a `CoreState` since it requires an initialized SDL to work.
function Nene.Texture:draw(nene_state: Nene.CoreState, color: Nene.Color, source: facultative(Nene.Math.Rect), destination: overload(Nene.Math.Vec2, Nene.Math.Rect, niltype))
  check(self._data ~= nilptr, 'Cannot draw uninitialized texture')
  check(nene_state.initialized, 'Core State variable is not initialized')

  local src: *SDL_Rect = nilptr
  local dest: *SDL_Rect = nilptr

  ## if not source.type.is_niltype then
    local src_rect: SDL_Rect = {x = source.x, y = source.y, w = source.w, h = source.h}
    src = &src_rect
  ## end

  ## if not destination.type.is_niltype and (destination.type.is_vec2 or destination.type.is_rect) then
    local dest_rect: SDL_Rect = {x = destination.x, y = destination.y, w = self.width, h = self.height}

    ## if destination.type.is_rect then
      dest_rect.w = destination.w
      dest_rect.h = destination.h
    ## end

    dest = &dest_rect
  ## end

  SDL_SetTextureColorMod(self._data, color.r, color.g, color.b)
  SDL_RenderCopy(nene_state.renderer, self._data, src, dest)
end

function Nene.Texture:apply_sdltex(new_tex: *SDL_Texture)
  check(new_tex ~= nilptr, "Cannot update Nene.Texture with a nilptr sdl texture")

  if self.initialized then
    self:free()
  end

  local fmt: uint32, access: cint, w: cint, h: cint;
  local ok = SDL_QueryTexture(new_tex, &fmt, &access, &w, &h)

  self._data = new_tex
  self.width = w
  self.height = h
  self.initialized = true
end

function Nene.Texture.new(new_tex: *SDL_Texture): Nene.Texture
  check(new_tex ~= nilptr, "Cannot create Nene.Texture with a nilptr sdl texture")

  local new: Nene.Texture = {}
  new:apply_sdltex(new_tex)

  return new
end
