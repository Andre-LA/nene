##[[
cinclude '<SDL2/SDL_ttf.h>'
linklib 'SDL2_ttf'
]]
global function TTF_Linked_Version(): *SDL_version <cimport, nodecl> end
global function TTF_ByteSwappedUNICODE(swapped: cint) <cimport, nodecl> end
global TTF_Font: type <cimport, nodecl, forwarddecl> = @record{}
global function TTF_Init(): cint <cimport, nodecl> end
global function TTF_OpenFont(file: cstring, ptsize: cint): *TTF_Font <cimport, nodecl> end
global function TTF_OpenFontIndex(file: cstring, ptsize: cint, index: clong): *TTF_Font <cimport, nodecl> end
global function TTF_OpenFontRW(src: *SDL_RWops, freesrc: cint, ptsize: cint): *TTF_Font <cimport, nodecl> end
global function TTF_OpenFontIndexRW(src: *SDL_RWops, freesrc: cint, ptsize: cint, index: clong): *TTF_Font <cimport, nodecl> end
global function TTF_GetFontStyle(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_SetFontStyle(font: *TTF_Font, style: cint) <cimport, nodecl> end
global function TTF_GetFontOutline(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_SetFontOutline(font: *TTF_Font, outline: cint) <cimport, nodecl> end
global function TTF_GetFontHinting(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_SetFontHinting(font: *TTF_Font, hinting: cint) <cimport, nodecl> end
global function TTF_FontHeight(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_FontAscent(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_FontDescent(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_FontLineSkip(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_GetFontKerning(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_SetFontKerning(font: *TTF_Font, allowed: cint) <cimport, nodecl> end
global function TTF_FontFaces(font: *TTF_Font): clong <cimport, nodecl> end
global function TTF_FontFaceIsFixedWidth(font: *TTF_Font): cint <cimport, nodecl> end
global function TTF_FontFaceFamilyName(font: *TTF_Font): cstring <cimport, nodecl> end
global function TTF_FontFaceStyleName(font: *TTF_Font): cstring <cimport, nodecl> end
global function TTF_GlyphIsProvided(font: *TTF_Font, ch: uint16): cint <cimport, nodecl> end
global function TTF_GlyphMetrics(font: *TTF_Font, ch: uint16, minx: *cint, maxx: *cint, miny: *cint, maxy: *cint, advance: *cint): cint <cimport, nodecl> end
global function TTF_SizeText(font: *TTF_Font, text: cstring, w: *cint, h: *cint): cint <cimport, nodecl> end
global function TTF_SizeUTF8(font: *TTF_Font, text: cstring, w: *cint, h: *cint): cint <cimport, nodecl> end
global function TTF_SizeUNICODE(font: *TTF_Font, text: *uint16, w: *cint, h: *cint): cint <cimport, nodecl> end
global function TTF_RenderText_Solid(font: *TTF_Font, text: cstring, fg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderUTF8_Solid(font: *TTF_Font, text: cstring, fg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderUNICODE_Solid(font: *TTF_Font, text: *uint16, fg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderGlyph_Solid(font: *TTF_Font, ch: uint16, fg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderText_Shaded(font: *TTF_Font, text: cstring, fg: SDL_Color, bg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderUTF8_Shaded(font: *TTF_Font, text: cstring, fg: SDL_Color, bg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderUNICODE_Shaded(font: *TTF_Font, text: *uint16, fg: SDL_Color, bg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderGlyph_Shaded(font: *TTF_Font, ch: uint16, fg: SDL_Color, bg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderText_Blended(font: *TTF_Font, text: cstring, fg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderUTF8_Blended(font: *TTF_Font, text: cstring, fg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderUNICODE_Blended(font: *TTF_Font, text: *uint16, fg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderText_Blended_Wrapped(font: *TTF_Font, text: cstring, fg: SDL_Color, wrapLength: uint32): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderUTF8_Blended_Wrapped(font: *TTF_Font, text: cstring, fg: SDL_Color, wrapLength: uint32): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderUNICODE_Blended_Wrapped(font: *TTF_Font, text: *uint16, fg: SDL_Color, wrapLength: uint32): *SDL_Surface <cimport, nodecl> end
global function TTF_RenderGlyph_Blended(font: *TTF_Font, ch: uint16, fg: SDL_Color): *SDL_Surface <cimport, nodecl> end
global function TTF_CloseFont(font: *TTF_Font) <cimport, nodecl> end
global function TTF_Quit() <cimport, nodecl> end
global function TTF_WasInit(): cint <cimport, nodecl> end
global function TTF_GetFontKerningSize(font: *TTF_Font, prev_index: cint, index: cint): cint <cimport, nodecl> end
global function TTF_GetFontKerningSizeGlyphs(font: *TTF_Font, previous_ch: uint16, ch: uint16): cint <cimport, nodecl> end
global SDL_TTF_MAJOR_VERSION: cint <cimport, nodecl, const>
global SDL_TTF_MINOR_VERSION: cint <cimport, nodecl, const>
global SDL_TTF_PATCHLEVEL: cint <cimport, nodecl, const>
global SDL_TTF_COMPILEDVERSION: cint <cimport, nodecl, const>
global UNICODE_BOM_NATIVE: cint <comptime> = 0xfeff
global UNICODE_BOM_SWAPPED: cint <comptime> = 0xfffe
global TTF_STYLE_NORMAL: cint <comptime> = 0x00
global TTF_STYLE_BOLD: cint <comptime> = 0x01
global TTF_STYLE_ITALIC: cint <comptime> = 0x02
global TTF_STYLE_UNDERLINE: cint <comptime> = 0x04
global TTF_STYLE_STRIKETHROUGH: cint <comptime> = 0x08
global TTF_HINTING_NORMAL: cint <comptime> = 0
global TTF_HINTING_LIGHT: cint <comptime> = 1
global TTF_HINTING_MONO: cint <comptime> = 2
global TTF_HINTING_NONE: cint <comptime> = 3
global function SDL_TTF_VERSION_ATLEAST(x: cint, y: cint, z: cint): SDL_bool <cimport, nodecl> end
global function SDL_TTF_VERSION(x: *SDL_version) <cimport, nodecl> end
global function TTF_SetError(fmt: cstring, ...: cvarargs): cint <cimport, nodecl> end
global function TTF_GetError(): cstring <cimport, nodecl> end
