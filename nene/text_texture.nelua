local Nene = require 'nene'
local Color = require 'nene.color'
local Font = require 'nene.font'
local Texture = require 'nene.texture'
local Math = require 'nene.math'

local Vec2, Rect = Math.Vec2, Math.Rect

require 'nene.macros'
## local warn_msg = macros.warn_msg


--[[
**Owns** an internal `Texture` with a text in it, this text is also stored as a string on the `text` field.
Use `update_text` method to easily to update both `text` and `texture` with this new text.

Related Nene documentation:
* [Texture](texture.md#texture)
]]
local TextTexture = @record{
  texture: Texture,
  text: string,
}

--[[
Destroy the TextTexture and resets to zeroed state.

Related Nene documentation:
* [Texture.destroy](texture.md#texturedestroy)
]]
function TextTexture:destroy()
  self.text = (@string)()
  self.texture:destroy()
end

--[[
Updates the text texture with a new UTF-8 `text`, with the given `font`.

You can optionally also pass a `color`, which by default is white.

Another optional string argument is how the renderer should render your text, two options are currently offered:
* 'solid': The default one, renders a non-antialiased text on a 8-bit surface
* 'blended': renders an antialiased text on a 32-bit surface.

Returns an `ok` status with `true` value if successful.

Related Nene documentation:
* [Nene.create_raw_texture_from_surface](core.md#nenecreate_raw_texture_from_surface)
* [Texture.apply_sdltex](texture.md#textureapply_sdltex)

Related SDL and SDL_TTF documentation:
* [TTF_RenderUTF8_Solid](https://github.com/libsdl-org/SDL_ttf/blob/9a2cb0e452a52045419c3554e4c6696a3cd0a714/SDL_ttf.h#L224-L225)
* [TTF_RenderUTF8_Blended](https://github.com/libsdl-org/SDL_ttf/blob/9a2cb0e452a52045419c3554e4c6696a3cd0a714/SDL_ttf.h#L302-L303)
* [SDL_FreeSurface](https://wiki.libsdl.org/SDL_FreeSurface)
]]
function TextTexture:update_text(text: string, font: Font, color: facultative(Color), render_mode: facultative(string) <comptime>): boolean
  ## if not render_mode.type.is_niltype then
    check(render_mode == 'solid' or render_mode == 'blended', "unsupported render_mode, only `nil`, 'solid' or 'blended' are supported")
  ## end

  local nene = Nene.instance()

  ## if color.type.is_niltype then
  local color = Color.Palette.white
  ## end

  ##[[
  local mode = render_mode.type.is_niltype and 'solid' or render_mode.value
  local ttf_render_utf8 = { solid = 'TTF_RenderUTF8_Solid', blended = 'TTF_RenderUTF8_Blended' }
  ]]

  local raw_text_surface = #|ttf_render_utf8[mode]|#(font:get_raw(), text, color)

  defer SDL_FreeSurface(raw_text_surface) end

  if not raw_text_surface then
    warn_msg!('TextTexture.update_text', 'could not update the texture texture, the text could not be rendered as a surface', 'TTF_GetError')
    return false
  end

  local ok, text_texture = nene:create_raw_texture_from_surface(raw_text_surface)

  if not ok then
    warn_msg!('TextTexture.update_text', 'could not update the texture texture, texture could not be created from the surface', 'TTF_GetError')
    return false
  end

  self.texture:apply_raw(text_texture)
  self.text = text

  return true
end

--[[
Draw the texture at the given `position`.

A `color` tint can be passed optionally, it's white by default.

Related Nene documentation:
* [Texture.draw](texture.md#texturedraw)
* [Math.Vec2](math.md#mathvec2)
* [Math.Rect](math.md#mathrect)
* [Color](colors.md#color)
]]
function TextTexture:draw(position: Vec2, color: facultative(Color))
  local nene = Nene.instance()

  ## if color.type.is_niltype then
  local color = Color.Palette.white
  ## end

  local dest: Rect = {
    x = math.ifloor(position.x),
    y = math.ifloor(position.y),
    w = self.texture.width,
    h = self.texture.height
  }

  self.texture:draw(color, nil, dest)
end

--[[
Creates a new initialized `TextTexture` with an `initial_text` applied with the given `font`.

A color can be passed optionally, is white by default.

Related Nene documentation:
* [TextTexture.update_text](#texttextureupdate_text)
]]
function TextTexture.init(initial_text: string, font: Font, color: facultative(Color), render_mode: facultative(string) <comptime>): TextTexture
  local nene = Nene.instance()

  local new: TextTexture;
  new:update_text(initial_text, font, color, render_mode)
  return new
end

return TextTexture
