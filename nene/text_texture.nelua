require 'nene.wrappers.sdl'
require 'nene.wrappers.ttf'

require 'nene.core'
require 'nene.colors'
require 'nene.font'
require 'nene.texture'
require 'nene.math'

local Vec2, Rect = Math.Vec2, Math.Rect

--[[
**Owns** an internal `Texture` with a text in it, this text is also stored as a string on the `text` field.
Use `update_text` method to easily to update both `text` and `texture` with this new text.

Related Nene documentation:
* [Texture](texture.md#texture)
]]
global TextTexture = @record{
  texture: Texture,
  text: string,
}

--[[
Destroy the TextTexture.

Related Nene documentation:
* [Texture.destroy](texture.md#texturedestroy)
]]
function TextTexture:destroy()
  self.text = ''
  self.texture:destroy()
end

--[[
Updates the text texture with a new `text`, with the given `font`.

You can optionally also pass a `color`, which by default is white.

Related Nene documentation:
* [Nene.create_texture_from_surface](core.md#nenecreate_texture_from_surface)
* [Texture.apply_sdltex](texture.md#textureapply_sdltex)

Related SDL and SDL_TTF documentation:
* [TTFWrapper.ttf_render_utf8_solid](wrappers/ttf.md#ttfwrapperttf_render_utf8_solid)
* [SDLWrapper.create_texture_from_surface](wrappers/sdl.md#sdlwrappercreate_texture_from_surface)
* [SDLWrapper.free_surface](wrappers/sdl.md#sdlwrapperfree_surface)
]]
function TextTexture:update_text(nene: Nene, text: string, font: Font, color: facultative(Color))
  ## if color.type.is_niltype then
  local color = Color.Palette.white
  ## end

  local text_surface, ok = TTFWrapper.ttf_render_utf8_solid(font:get(), text, color)

  if ok then
    local text_texture = nene:create_texture_from_surface(text_surface)
    SDLWrapper.free_surface(text_surface)

    if text_texture then
      self.texture:apply_sdltex(text_texture)
      self.text = text
    else
      warn'TextTexture.update_text: could not update text texture'
    end
  end
end

--[[
Draw the texture at the given `position` with the given `color` tint.

Related Nene documentation:
* [Texture.draw](texture.md#texturedraw)
* [Math.Vec2](math.md#mathvec2)
* [Math.Rect](math.md#mathrect)
* [Color](colors.md#color)
]]
function TextTexture:draw(nene: Nene, position: Vec2, color: Color)
  local dest: Rect = {
    x = math.ifloor(position.x), y = math.ifloor(position.y),
    w = self.texture.width, h = self.texture.height
  }

  self.texture:draw(nene, color, nil, dest)
end

--[[
Creates a new initialized `TextTexture` with an `initial_text` applied with the given `font`.

A color can be passed optionally, is white by default.

Related Nene documentation:
* [TextTexture.update_text](#texttextureupdate_text)
]]
function TextTexture.new(nene: Nene, initial_text: string, font: Font, color: facultative(Color)): TextTexture
  local new: TextTexture;
  new:update_text(nene, initial_text, font, color)
  return new
end
