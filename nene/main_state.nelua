require 'resourcepool'

require 'nene.core'
require 'nene.core_state'

require 'nene.texture'
--require 'nene.audio'
--require 'nene.font'


--- A ready-to-use main state record, it already contains the core and does extra management to make game development easier.
--- The `Core.Main` module isn't required by any other module, and can be replaced by your own "Main" module if you wish.
global Nene.Main = @record{
  core: Nene.Core, -- nene core state
  resources: record{
    textures: resourcepool(Nene.Texture),
    --musics: resourcepool(Nene.Music),
    --sounds: resourcepool(Nene.Sound),
    --fonts: resourcepool(Nene.Font),
  }
}
local Main = @Nene.Main

--- initializes the main state, it also does some `assert`s to ensure that everything properly initialized.
function Main.init(title: string, window_size_x: integer, window_size_y: integer): Nene.Main
  local ok, core = Nene.Core.init(title, window_size_x, window_size_y)
  assert(ok, 'core initialization failed')

  return (@Nene.Main){ =core }
end

--- Finalize application by freeing all resources and terminating the core
function Main:terminate()
  -- free resources

  ## for i, field in ipairs(Main.value.fields.resources.type.fields) do
    for i = 0, < #self.resources.#|field.name|#.items do
      self.resources.#|field.name|#.items[i]:destroy()
    end
  ## end

  -- terminate core
  self.core:terminate()
end
