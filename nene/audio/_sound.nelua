-- The Sound module, used mainly for sound effects, but it can be used for any kind of sound in general.
--
-- > Note: For music, you should look for the [`Music` module](music.md).

--[[
Copyright (c) 2021-present André Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

local math = require 'math'

require 'nene.raw.sdl2_mixer'
require 'nene.macros'

## local warn_msg = macros.warn_msg

-- Wraps a (SDL_mixer) sound associated with a sound channel
local Sound = @record{
  _data: *Mix_Chunk, -- internal data, don't use it directly, use methods instead
  channel: integer, -- -1 when no channel is being used
}

--[[
Returns the `pointer(Mix_Chunk)` internal data.

It also [`check`](https://nelua.io/libraries/#check)s if the internal data is `nilptr`.

Related SDL_mixer documentation:
* [Mix_Chunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_85.html#SEC85)
]]
function Sound:get_raw(): *Mix_Chunk
  check(self._data ~= nilptr, 'Sound.get: Sound internal data is `nilptr`')
  return self._data
end

--[[
try to load a sound from a file.

Returns an `ok` status with `true` value and an sound if successful.

Related SDL_mixer documentation:
* [Mix_LoadWAV](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_19.html)
]]
function Sound.load(filename: string): (boolean, Sound)
  local raw_sound = Mix_LoadWAV(filename)

  if not raw_sound then
    warn_msg!('Sound.load', 'could not load the sound file', 'Mix_GetError')
    return false, (@Sound)()
  end

  local new_sound: Sound = {
    _data = raw_sound,
    channel = -1
  }

  return true, new_sound
end

--[[
plays the loaded sound.
* if `true` is passed on `loop` argument, the sound will loop forever;
* if an `integer` is passed, the sound will loop `loop` times
* if `nil` is passed, it will play only one time.

When there is no sound loaded (that is, the internal data is `nilptr`), then this method
does nothing, though it also `check`s if the internal is `nilptr` (unless the `nochecks` pragma is enabled)

Returns an `ok` status with `true` value if successful.

Related SDL_mixer documentation:
* [Mix_PlayChannel](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_28.html)
]]
function Sound:play(loop: overload(boolean, integer, niltype)): (boolean)
  local raw_sound = self:get_raw()

  if raw_sound ~= nilptr then
    local loops = 0

    ## if loop.type.is_boolean then
      loops = loop and -1 or 0
    ## elseif loop.type.is_integral then
      loops = ĺoop
    ## end

    self.channel = Mix_PlayChannel(-1, raw_sound, loops)
    if self.channel == -1 then
      warn_msg!('Sound.play', 'could not play the sound', 'Mix_GetError')
      return false
    end
  else
    warn('Sound.play: sound is uninitialized, run a non-release build with nochecks pragma disabled')
    return false
  end

  return true
end

--[[
Halts (stop, interrupt) the sound.

Related SDL_mixer documentation:
* [Mix_HaltChannel](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_34.html)
]]
function Sound:stop()
  if self.channel >= 0 then
    Mix_HaltChannel(self.channel)
    self.channel = -1
  end
end

--[[
Set the volume of the sound by passing a number between 0 and 1 (0% and 100%).

Related SDL_mixer documentation:
* [Mix_VolumeChunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer.html#SEC23)
]]
function Sound:set_volume(vol: number): (boolean, number)
  check(vol >= 0 and vol <= 1, "vol argument must a number between 0 and 1")
  local new_volume: cint = math.clamp(math.ifloor(vol * MIX_MAX_VOLUME), 0, MIX_MAX_VOLUME)

  local raw_sound = self:get_raw()

  if raw_sound ~= nilptr then
    local prev_vol = Mix_VolumeChunk(raw_sound, new_volume)
    return true, (prev_vol / MIX_MAX_VOLUME)
  else
    return false
  end
end

--[[
Destroy the sound and resets to zeroed state,

> Note: It will first stop the sound and then free the sound's memory.

Related SDL_mixer documentation:
* [Mix_FreeChunk](https://www.libsdl.org/projects/SDL_mixer/docs/SDL_mixer_24.html)
]]
function Sound:destroy()
  local raw_sound = self:get_raw()
  self:stop()
  Mix_FreeChunk(raw_sound)
  $self = (@Sound)()
end

-- Effectively the same as `destroy`, called when a to-be-closed variable goes out of scope.
function Sound:__close()
  self:destroy()
end

return Sound
