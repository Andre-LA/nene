require 'nene.sdl2'
require 'nene.sdl2_image'

require 'nene.macros'

global ImgWrapper = @record{}

##[[
local function warn_msg(fn_name, msg)
  macros.warn_sdl_msg_macro('ImgWrapper.'..fn_name, msg, 'SDL_image', 'IMG_GetError')
end
]]

--- Wrapper of `IMG_Init`
---
--- Initialize SDL_image loading support.
---
--- It returns an `ok` (boolean) success status and the bitmask that `IMG_Init` returns.
--- The `ok` status is true when the bitmask returned by `IMG_Init` is equals to `flags` argument.
---
--- Related SDL_image documentation:
--- * [IMG_Init](https://www.libsdl.org/projects/SDL_image/docs/SDL_image_8.html)
function ImgWrapper.img_init(flags: cint): (boolean, cint)
  local img_result = IMG_Init(flags)
  local ok = img_result & flags == flags

  if not ok then
    if img_result == 0 then
      ## warn_msg('img_init', "could not initialize SDL_image")
    else
      ## warn_msg('img_init', "SDL_image loading support wasn't initialized as expected")
    end
  end

  return ok, img_result
end

--- Wrapper of `IMG_Load`
---
--- Loads a image from `filepath` and will return a surface (pointer) and a ok status.
---
--- It will return `nilptr` if the image could not be loaded, this also throws
--- an warning message, you can test if the operation was successful using the
--- second return value.
---
--- Related SDL_image documentation:
--- * [IMG_Load](https://www.libsdl.org/projects/SDL_image/docs/SDL_image_11.html#SEC11)
function ImgWrapper.img_load(filepath: cstring): (*SDL_Surface, boolean)
  local surface = IMG_Load(filepath)
  local ok = surface ~= nilptr

  if not ok then
    ## warn_msg('img_load', 'could not load image')
  end

  return surface, ok
end

--- Wrapper of `IMG_Quit`
---
--- Shutdown and cleanup SDL_image loading support.
---
--- Related SDL_image documentation:
--- * [IMG_Quit](https://www.libsdl.org/projects/SDL_image/docs/SDL_image_9.html)
function ImgWrapper.img_quit()
  IMG_Quit()
end
