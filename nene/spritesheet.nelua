require 'hashmap'
require 'vector'

require 'nene.animation'
require 'nene.math'

local Rect, Grid = Math.Rect, Math.Grid

global SpriteSheet = @record{
  grid: Grid,
  sprites_per_line: isize,
  animations: hashmap(string, AnimationRange) -- hashmap of animations, maps animation names to animation ranges.
}

function SpriteSheet:destroy()
  -- destroy hashmap
  self.animations:destroy()

  -- reset to zeroed state
  self.grid = (@Grid)()
  self.sprites_per_line = 0
  self.animations = (@hashmap)()
end

function SpriteSheet:get_sprite_column_row(index: isize): (isize, isize)
  return Grid.get_nth_cell_column_row(index, self.sprites_per_line)
end

function SpriteSheet:get_source_rect(column: isize, row: isize)
  return self.grid:gen_rect(column, row)
end

function SpriteSheet:draw(nene: Nene, spritesheet_texture: Texture, animation_name: string, animation_index: isize, color: facultative(Color))
  ## if color.type.is_niltype then
  local color = Color.Palette.white
  ## end

  local animation = self.animations:peek(animation_name)
  check(animation ~= nilptr, "SpriteSheet.draw: animation name doesn't exists")

  local sprite_index = animation[animation_index]
  local sprite_column, sprite_row = spritesheet:get_sprite_column_row(sprite_index)
  local sprite_source = spritesheet:get_source_rect(sprite_column, sprite_row)

  local destination: Rect = {
    x = math.ifloor(position.x),
    y = math.ifloor(position.y),
    width = sprite_source.width,
    width = sprite_source.height
  }

  spritesheet_texture:draw(nene, color, sprite_source, destination)
end
