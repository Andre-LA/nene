require 'sdl2'
require 'sdl2_ttf'
require 'sdl2_image'
require 'sdl2_mixer'

require 'span'

require 'nene.core'

require 'nene.audio'
require 'nene.camera'

require 'nene.colors'
require 'nene.math'

--- instead of a internal state, the state is
--- exported and should be used externally.
---
--- Also, great part of the SDL API only works after initialization
--- so, the ideia is that a Nene.CoreState lives just as the SDL
--- after initialization and before quit.
---
--- SDL functions that should be only used after initialization
--- should be abstracted as a Nene.CoreState method, the functions
---
--- that doesn't contains this limitation should be a Nene
--- function instead (which is something that needs a review).
---
--- Note that Nene is made to use only one window.
global Nene.CoreState = @record{
  initialized: boolean,
  quit: boolean,
  window: *SDL_Window,
  renderer: *SDL_Renderer,
  keyboard_state: span(uint8),
  current_music: Nene.Music,
  previous_time: uint32,
  camera: Nene.Camera,
  --screen_texture: Nene.Texture (added later through meta-programming)
}

require 'nene.texture'
require 'nene.texture_atlas'
require 'nene.text_texture'
require 'nene.font'

require 'nene.spritesheet'
require 'nene.tilemap'

##[[do -- adding `screen_texture` field on `Nene.CoreState`
  local CoreState = Nene.value.metafields.CoreState.value
  local Texture = Nene.value.metafields.Texture.value

  staticassert(traits.is_type(CoreState) and CoreState.is_record)
  staticassert(traits.is_type(Texture) and Texture.is_record)

  CoreState:add_field('screen_texture', Texture)
end]]

local prev_music_id: usize = 0

--- Set `target_tex` texture as a render target
function Nene.CoreState:set_render_target(target_tex: facultative(Nene.Texture))
  check(self.initialized, 'Core State variable is not initialized')

  ## if target_tex.type.is_niltype then
    self:set_render_target(self.screen_texture)
  ## else
    SDL_SetRenderTarget(self.renderer, target_tex:get())
  ## end
end

--- Get the size of current window
function Nene.CoreState:get_window_size(): Nene.Math.Vec2
  local ww: cint, wh: cint;
  SDL_GetWindowSize(self.window, &ww, &wh)
  return (@Nene.Math.Vec2){ x = ww, y = wh}
end

--- Get the screen size
function Nene.CoreState:get_screen_size(): Nene.Math.Vec2
  return (@Nene.Math.Vec2){ x = self.screen_texture.width, y = self.screen_texture.height }
end

--- Get a proper drawing origin position (left-up point) considering the
--- camera's position and the window's screen size
function Nene.CoreState:get_render_pos(pos: Nene.Math.Vec2): Nene.Math.Vec2
  local cam_relative_pos = self.camera:get_relative_pos(pos)
  local winsize = self:get_screen_size() * 0.5

  return (@Nene.Math.Vec2){
    x = cam_relative_pos.x + winsize.x,
    y = cam_relative_pos.y + winsize.y
  }
end

--- plays the current music
--- when `true` is passed on `loop` parameter, the music will loop forever;
--- when an `integer` is passed on `loop` parameter, the music will loop `loop` times
function Nene.CoreState:play_music(music: Nene.Music, loop: overload(boolean, integer, niltype))
  check(music._data ~= nilptr, 'play: Cannot play a nilptr music')
  local loops = 0

  ## if loop.type.is_boolean then
    loops = loop and -1 or 0
  ## elseif loop.type.is_integral then
    loops = Äºoop
  ## end

  if Mix_PlayMusic(music._data, loops) == 0 then
    self.current_music = music
  else
    self.current_music = {}
  end
end

--- stops the current music
function Nene.CoreState:stop_music()
  Mix_HaltMusic()
end

--- The callbacks that should be passed on `pool_events`
global Nene.Callbacks = @record{
  window_cb  : function(window  : SDL_WindowEvent),           -- window window event data
  key_cb     : function(key     : SDL_KeyboardEvent),         -- key keyboard event data
  edit_cb    : function(edit    : SDL_TextEditingEvent),      -- edit text editing event data
  text_cb    : function(text    : SDL_TextInputEvent),        -- text text input event data
  motion_cb  : function(motion  : SDL_MouseMotionEvent),      -- motion mouse motion event data
  button_cb  : function(button  : SDL_MouseButtonEvent),      -- button mouse button event data
  wheel_cb   : function(wheel   : SDL_MouseWheelEvent),       -- wheel mouse wheel event data
  jaxis_cb   : function(jaxis   : SDL_JoyAxisEvent),          -- jaxis joystick axis event data
  jball_cb   : function(jball   : SDL_JoyBallEvent),          -- jball joystick ball event data
  jhat_cb    : function(jhat    : SDL_JoyHatEvent),           -- jhat joystick hat event data
  jbutton_cb : function(jbutton : SDL_JoyButtonEvent),        -- jbutton joystick button event data
  jdevice_cb : function(jdevice : SDL_JoyDeviceEvent),        -- jdevice joystick device event data
  caxis_cb   : function(caxis   : SDL_ControllerAxisEvent),   -- caxis game controller axis event data
  cbutton_cb : function(cbutton : SDL_ControllerButtonEvent), -- cbutton game controller button event data
  cdevice_cb : function(cdevice : SDL_ControllerDeviceEvent), -- cdevice game controller device event data
  adevice_cb : function(adevice : SDL_AudioDeviceEvent),      -- adevice audio device event data (>= SDL 2.0.4)
  quit_cb    : function(quit    : SDL_QuitEvent),             -- quit quit request event data
  user_cb    : function(user    : SDL_UserEvent),             -- user custom event data
  syswm_cb   : function(syswm   : SDL_SysWMEvent),            -- syswm system dependent window event data
  tfinger_cb : function(tfinger : SDL_TouchFingerEvent),      -- tfinger touch finger event data
  mgesture_cb: function(mgesture: SDL_MultiGestureEvent),     -- mgesture multi finger gesture data
  dgesture_cb: function(dgesture: SDL_DollarGestureEvent),    -- dgesture multi finger gesture data
  drop_cb    : function(drop    : SDL_DropEvent)              -- drag and drop event data
}

-- TODO: Should I rename this method as "update"?
--- Pool all SDL events, calls the respective callbacks, and then updates the state
function Nene.CoreState:pool_events(evt_callbacks: facultative(Nene.Callbacks))
  check(self.initialized, 'Core State variable is not initialized')

  local evt: SDL_Event;

  while SDL_PollEvent(&evt) == 1 do
    if evt.type == SDL_QUIT	 then
      self.quit = true
    end

    ## if not evt_callbacks.type.is_niltype then
      -- TODO: I could use `switch` here
      -- TODO: I think I could just use `if x then` instead of `if x ~= nilptr then` too

      if evt.type == SDL_QUIT and evt_callbacks.quit_cb ~= nilptr then
        evt_callbacks.quit_cb(evt.quit)
      elseif (evt.type == SDL_CONTROLLERAXISMOTION) and evt_callbacks.caxis_cb ~= nilptr then
        evt_callbacks.caxis_cb(evt.caxis)
      elseif (evt.type == SDL_CONTROLLERBUTTONDOWN or evt.type == SDL_CONTROLLERBUTTONUP) and evt_callbacks.cbutton_cb ~= nilptr then
        evt_callbacks.cbutton_cb(evt.cbutton)
      elseif (evt.type == SDL_CONTROLLERDEVICEADDED or evt.type == SDL_CONTROLLERDEVICEREMOVED or evt.type == SDL_CONTROLLERDEVICEREMAPPED) and evt_callbacks.cdevice_cb ~= nilptr then
        evt_callbacks.cdevice_cb(evt.cdevice)
      elseif (evt.type == SDL_DOLLARGESTURE or evt.type == SDL_DOLLARRECORD) and evt_callbacks.dgesture_cb ~= nilptr then
        evt_callbacks.dgesture_cb(evt.dgesture)
      elseif (evt.type == SDL_DROPFILE or evt.type == SDL_DROPTEXT or evt.type == SDL_DROPBEGIN or evt.type == SDL_DROPCOMPLETE) and evt_callbacks.drop_cb ~= nilptr then
        evt_callbacks.drop_cb(evt.drop)
      elseif (evt.type == SDL_FINGERMOTION or evt.type == SDL_FINGERDOWN or evt.type == SDL_FINGERUP) and evt_callbacks.tfinger_cb ~= nilptr then
        evt_callbacks.tfinger_cb(evt.tfinger)
      elseif (evt.type == SDL_KEYDOWN or evt.type == SDL_KEYUP) and evt_callbacks.key_cb ~= nilptr then
        evt_callbacks.key_cb(evt.key)
      elseif (evt.type == SDL_JOYAXISMOTION) and evt_callbacks.jaxis_cb ~= nilptr then
        evt_callbacks.jaxis_cb(evt.jaxis)
      elseif (evt.type == SDL_JOYBALLMOTION) and evt_callbacks.jball_cb ~= nilptr then
        evt_callbacks.jball_cb(evt.jball)
      elseif (evt.type == SDL_JOYHATMOTION) and evt_callbacks.jhat_cb ~= nilptr then
        evt_callbacks.jhat_cb(evt.jhat)
      elseif (evt.type == SDL_JOYBUTTONDOWN or evt.type == SDL_JOYBUTTONUP) and evt_callbacks.jbutton_cb ~= nilptr then
        evt_callbacks.jbutton_cb(evt.jbutton)
      elseif (evt.type == SDL_JOYDEVICEADDED or evt.type == SDL_JOYDEVICEREMOVED) and evt_callbacks.jdevice_cb ~= nilptr then
        evt_callbacks.jdevice_cb(evt.jdevice)
      elseif (evt.type == SDL_MOUSEMOTION) and evt_callbacks.motion_cb ~= nilptr then
        evt_callbacks.motion_cb(evt.motion)
      elseif (evt.type == SDL_MOUSEBUTTONDOWN or evt.type == SDL_MOUSEBUTTONUP) and evt_callbacks.button_cb ~= nilptr then
        evt_callbacks.button_cb(evt.button)
      elseif (evt.type == SDL_MOUSEWHEEL) and evt_callbacks.wheel_cb ~= nilptr then
        evt_callbacks.wheel_cb(evt.wheel)
      elseif (evt.type == SDL_MULTIGESTURE) and evt_callbacks.mgesture_cb ~= nilptr then
        evt_callbacks.mgesture_cb(evt.mgesture)
      elseif (evt.type == SDL_SYSWMEVENT) and evt_callbacks.syswm_cb ~= nilptr then
        evt_callbacks.syswm_cb(evt.syswm)
      elseif (evt.type == SDL_TEXTEDITING) and evt_callbacks.edit_cb ~= nilptr then
        evt_callbacks.edit_cb(evt.edit)
      elseif (evt.type == SDL_TEXTINPUT) and evt_callbacks.text_cb ~= nilptr then
        evt_callbacks.text_cb(evt.text)
      elseif (evt.type == SDL_USEREVENT) and evt_callbacks.user_cb ~= nilptr then
        evt_callbacks.user_cb(evt.user)
      elseif (evt.type == SDL_WINDOWEVENT) and evt_callbacks.window_cb ~= nilptr then
        evt_callbacks.window_cb(evt.window)
      elseif (evt.type == SDL_AUDIODEVICEADDED or evt.type == SDL_AUDIODEVICEREMOVED) and evt_callbacks.adevice_cb ~= nilptr then
        evt_callbacks.adevice_cb(evt.adevice)
      end
    ## end
  end

  do -- update keyboard_state
    local kb_state_len: cint;
    local kb_state_arr = SDL_GetKeyboardState(&kb_state_len)

    self.keyboard_state = {
      data = kb_state_arr,
      size = kb_state_len
    }
  end
end

function Nene.CoreState:get_key(scancode: SDL_Scancode): boolean
  return self.keyboard_state[scancode] == 1
end

-- try to load a font from a file
-- it returns:
-- * a boolean that indicates the success or failure of procedure
-- * an error message string, it will be an empty string on success
-- * the font, properly initialized on success
function Nene.CoreState:load_font(filename: string, ptsize: integer): (boolean, string, Nene.Font)
  local new_font: Nene.Font = {
    _data = TTF_OpenFont(filename, ptsize)
  }

  if not new_font._data then
    return false, TTF_GetError(), new_font
  else
    return true, '', new_font
  end
end

-- try to load a sound from a file
-- it returns:
-- * a boolean that indicates the success or failure of procedure
-- * an error message string, it will be an empty string on success
-- * the sound, properly initialized on success
function Nene.CoreState:load_sound(filename: string): (boolean, string, Nene.Sound)
  local new_sound: Nene.Sound = {
    _data = Mix_LoadWAV(filename),
    channel = -1
  }

  if not new_sound._data then
    return false, Mix_GetError(), new_sound
  else
    return true, '', new_sound
  end
end

-- try to load a music from a file
-- it returns:
-- * a boolean that indicates the success or failure of procedure
-- * an error message string, it will be an empty string on success
-- * the music, properly initialized on success
function Nene.CoreState:load_music(filename: string): (boolean, string, Nene.Music)
  local new_music: Nene.Music = {
    _data = Mix_LoadMUS(filename),
    id = prev_music_id + 1 -- using an unique id
  }

  prev_music_id = new_music.id

  if not new_music._data then
    return false, Mix_GetError(), new_music
  else
    return true, '', new_music
  end
end

-- try to load a texture from a file
-- it returns:
-- * a boolean that indicates the success or failure of procedure
-- * an error message string, it will be a empty string on success
-- * the texture, properly initialized on success
function Nene.CoreState:load_texture(filename: string): (boolean, string, Nene.Texture)
  check(self.initialized, 'Core State variable is not initialized')

  local surface = IMG_Load(filename)
  if not surface then
    return false, IMG_GetError(), (@Nene.Texture){}
  end

  local texture = SDL_CreateTextureFromSurface(self.renderer, surface)
  SDL_FreeSurface(surface)

  if not texture then
    return false, SDL_GetError(), (@Nene.Texture){}
  end

  return true, "", Nene.Texture.new(texture)
end

-- Draw an `atlas` `frame` at a specific `position` from a `spritesheet`
-- You can also pass a `SpriteSheet` or a `Tilemap` as the `atlas` argument
-- TODO: * add `angle`, `center`, and `flip` facultative parameters and use RenderCopyEx
--       * I'll may need scaling too
--       * use `color`
function Nene.CoreState:render_draw_atlas_frame(
  atlas_src: overload(Nene.TextureAtlas, Nene.SpriteSheet, Nene.Tilemap),
  frame: usize,
  position: Nene.Math.Vec2,
  color: Nene.Color
)
  check(self.initialized, 'Core State variable is not initialized')

  ## if atlas_src.type.is_spritesheet or atlas_src.type.is_tilemap then
  local atlas = atlas_src.atlas
  ## else
  local atlas = atlas_src
  ## end

  local tex_w_units = math.ifloor(atlas.texture.width / atlas.unit_width)

  local src_rect: Nene.Math.Rect = {
    x = (frame % tex_w_units) * atlas.unit_width,
    y = math.ifloor(frame / tex_w_units) * atlas.unit_height,
    w = atlas.unit_width,
    h = atlas.unit_height
  }

  position = self:get_render_pos(position)

  local dest_rect: Nene.Math.Rect = {
    x = math.ifloor(position.x),
    y = math.ifloor(position.y),
    w = atlas.unit_width,
    h = atlas.unit_height,
  }

  atlas.texture:draw(self, color, src_rect, dest_rect)
end

function Nene.CoreState:render_draw_tilemap(tilemap: Nene.Tilemap, position: Nene.Math.Vec2, color: Nene.Color)
  check(self.initialized, 'Core State variable is not initialized')
  check(tilemap.atlas ~= nilptr, "tilemap's atlas is not initialized")

  local i_offset = 0

  for i = 0, < #tilemap.map do
    local frame = tilemap.map[i]

    if frame < 0 then
      i_offset = i_offset - frame - 1 -- frame is negative, so this will increate i_offset
    else
      local tile_pos = tilemap:get_position_from_index(i + i_offset)
      self:render_draw_atlas_frame($tilemap.atlas, frame, tile_pos + position, color)
    end
  end
end

function Nene.CoreState:render_clear(color: Nene.Color)
  check(self.initialized, 'Core State variable is not initialized')

  SDL_SetRenderDrawColor(self.renderer, color.r, color.g, color.b, color.a)
  SDL_RenderClear(self.renderer)
end

function Nene.CoreState:render_draw_rect(rect: Nene.Math.Rect, use_lines: boolean, color: Nene.Color)
  check(self.initialized, 'Core State variable is not initialized')

  local target_pos = self:get_render_pos({rect.x, rect.y})

  local sdl_rect: SDL_Rect = {
    x = math.ifloor(target_pos.x), y = math.ifloor(target_pos.y),
    w = rect.w, h = rect.h
  }

  SDL_SetRenderDrawColor(self.renderer, color.r, color.g, color.b, color.a)

  if use_lines then
    SDL_RenderDrawRect(self.renderer, sdl_rect)
  else
    SDL_RenderFillRect(self.renderer, sdl_rect)
  end
end

function Nene.CoreState:get_ms_time()
  return SDL_GetTicks()
end

function Nene.CoreState:get_deltatime()
  return self:get_ms_time() - self.previous_time
end

function Nene.CoreState:render_present()
  check(self.initialized, 'Core State variable is not initialized')
  self.previous_time = self:get_ms_time()

  local sdl_screen_tex = SDL_GetRenderTarget(self.renderer)

  SDL_SetRenderTarget(self.renderer, nilptr)
  SDL_RenderCopy(self.renderer, sdl_screen_tex, nilptr, nilptr)
  SDL_RenderPresent(self.renderer)

  SDL_SetRenderTarget(self.renderer, sdl_screen_tex)
end

--- try to initialize and return a new initilized
--- core state.
--- returns:
---   * a boolean that indicates true on success
---   * a string error message on failure (or empty otherwise)
---   * a new state, only filled on success
--- notes:
---   You always should first check if the initialization
---   succeeded before trying to use the state
function Nene.init(
  title: string,
  window_size_x: integer, window_size_y: integer,
  screen_size_x: facultative(integer), screen_size_y: facultative(integer),
  pos_x: facultative(integer), pos_y: facultative(integer),
  flags: facultative(uint32)
): (boolean, string, Nene.CoreState)
  check(window_size_x > 0 and window_size_y > 0, 'cannot create a window with `0` as a size parameter')

  local new_state: Nene.CoreState = {}

  local sdl_init_result = SDL_Init(SDL_INIT_VIDEO)
  if sdl_init_result < 0 then
    return false, SDL_GetError(), new_state
  end

  ## if pos_x.type.is_niltype then
    local pos_x = SDL_WINDOWPOS_UNDEFINED
  ## end
  ## if pos_y.type.is_niltype then
    local pos_y = SDL_WINDOWPOS_UNDEFINED
  ## end
  ## if flags.type.is_niltype then
    local flags = SDL_WINDOW_SHOWN
  ## end

  local window = SDL_CreateWindow(title, pos_x, pos_y, window_size_x, window_size_y, flags)
  if not window then
    return false, SDL_GetError(), new_state
  end

  local renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC)
  if not renderer then
    return false, SDL_GetError(), new_state
  end

  local img_init_result = IMG_Init(IMG_INIT_PNG) & IMG_INIT_PNG
  if img_init_result == 0 then
    return false, IMG_GetError(), (@Nene.CoreState){}
  end

  local mixer_init_result = Mix_Init(MIX_INIT_OGG) & MIX_INIT_OGG
  if mixer_init_result == 0 then
    return false, Mix_GetError(), (@Nene.CoreState){}
  end

  local mix_openaudio = Mix_OpenAudio(MIX_DEFAULT_FREQUENCY, MIX_DEFAULT_FORMAT, 2, 2048)
  if mix_openaudio < 0 then
    return false, Mix_GetError(), (@Nene.CoreState){}
  end

  local ttf_init_result = TTF_Init()
  if ttf_init_result < 0 then
    return false, TTF_GetError(), (@Nene.CoreState){}
  end

  local screen_size: Nene.Math.Vec2 = {window_size_x, window_size_y}

  ## if not screen_size_x.type.is_niltype then
    screen_size.x = screen_size_x
  ## end
  ## if not screen_size_y.type.is_niltype then
    screen_size.y = screen_size_y
  ## end


  local screen_texture = Nene.Texture.new(SDL_CreateTexture(renderer,
                                                            SDL_PIXELFORMAT_RGBA8888,
                                                            SDL_TEXTUREACCESS_TARGET,
                                                            math.ifloor(screen_size.x),
                                                            math.ifloor(screen_size.y)))

  SDL_SetRenderDrawColor(renderer, 0xff, 0xff, 0xff, 0xff)

  new_state = {
    initialized = true,
    camera = { pos = { x = screen_size.x // 2, y = screen_size.y // 2 } },
    =window,
    =renderer,
    =screen_texture
  }

  new_state:set_render_target(nil)

  return true, "", new_state
end

--- Finalize application and quits all SDL subsystems
function Nene.CoreState:terminate()
  check(self.initialized, 'Core State variable is not initialized')

  self.initialized = false

  SDL_DestroyRenderer(self.renderer)
  self.renderer = nilptr

  SDL_DestroyWindow(self.window)
  self.window = nilptr

  TTF_Quit()

  Mix_CloseAudio()
  Mix_Quit()

  IMG_Quit()

  SDL_Quit()
end
