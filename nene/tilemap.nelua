-- The Tilemap module.

-- Copyright (c) 2021-2022 André Luiz Alvares
-- Nene is licensed under the Zlib license.
-- Please refer to the LICENSE file for details
-- SPDX-License-Identifier: Zlib

-- nelua
local math = require 'math'
local span = require 'span'

-- nene
local Color = require 'nene.color'
local Texture = require 'nene.texture'
local TextureAtlas = require 'nene.texture_atlas'

local Vec2 = require 'nene.math.vec2'
local Rect = require 'nene.math.rect'
local Grid = require 'nene.math.grid'

--[[
A tilemap contains a `width` number of tiles per line and a map made of numbers which are the `n+1`th tiles from
the tileset (which is a texture atlas).

This is how the `map` field works:
* `map` is a `span` of `uint16` numbers, the first entry is on the uppper-left corner of the tilemap and it goes from
left to right, top to bottom direction.
* each number of `map` is either a `tile+1` tile from the tileset or an empty space.
* when the number it's `0`, then it's an empty space, othewise it refers to a `tile` from the tileset.

Remember: tileset's tiles starts from 0, here these tiles are summed with `1` so the `0` can be used as an empty space.

> Note: Some maps from other programs (like Tiled) uses `-1` as an empty space, if you use it, remember to also sum with 1 to
convert to nene's tilemap numbers (don't worry, nene already subtracts with 1 in order to convert to TextureAtlas numbers).

Related Nene documentation:
* [Math.Grid](math/grid.md#grid)
]]
local Tilemap = @record{
  tileset: TextureAtlas, -- The tileset texture atlas of this tilemap
  width: uint16,         -- Amount of tiles per line
  grid: Grid,            -- The grid of the tilemap
  map: span(uint16),     -- The map of the tilemap
}

--[[
Returns the map's height.

For example, let's say that an tilemap have 3 tiles of width, and it contains 5 tiles
in it's map, then the map looks like this:

```
┌───┬───┬───┐ ┬ 0 ↓ height
│ 1 │ 2 │ 3 │ │
├───┼───┼───┘ ┼ 1
│ 4 │ 5 │     │
└───┴───┘     ┴ 2 -> this is the result
```
]]
function Tilemap:get_height(): isize
  return math.ceil(#self.map / self.width)
end

--[[
Returns the map's size in pixels.

For example, let's say that an tilemap have 3 tiles of width, and it contains 5 tiles
in it's map, also let's cells of the tilemap's grid it's 16x16 without gaps:

```
width →
0px  16px 32px 48px
├────┼────┼────┤
┌────┬────┬────┐ ┬ 0 (0px) ↓ height
│  1 │  2 │  3 │ │
├────┼────┼────┘ ┼ 1 (16px)
│  4 │  5 │      │
└────┴────┘      ┴ 2 (32px)
```

Thus the size will be { 48, 32 }
]]
function Tilemap:get_size(): Vec2
  local size = self.grid:get_cell_pos(self.width, self:get_height())
  return Vec2{ size.x - self.grid.gap.x, size.y - self.grid.gap.y }
end

--[[
Traverse all non-zero tiles of the tilemap and calls `tile_callback` for each tile., passing the
respective tile's rectangle, data (the tile number), and the whole map size.
]]
function Tilemap:traverse_tiles(tile_callback: function(tile_rect: Rect, map_size: Vec2, tile: uint16))
  check(tile_callback, "'tile_callback' wasn't passed.")

  local map_size = self:get_size()

  for i = 0, < #self.map do
    local tile = self.map[i]
    if tile > 0 then
      local tile_rect = self.grid:get_rect(Grid.get_nth_cell_column_row(i, self.width))
      tile_callback(tile_rect, map_size, tile)
    end
  end
end

--[[
Draw the whole `tilemap` at the `position`.

You can optionally pass a color `tint`.

Related Nene documentation:
* [Math.Vec2](math/vec2.md#vec2)
* [Texture](texture.md#texture)
* [Color](color.md#color)
]]
function Tilemap:draw(position: Vec2, tint: facultative(Color))
  ## if tint.type.is_niltype then
  local tint = Color.Palette.white
  ## end

  for tilemap_n = 0, < #self.map do
    local atlas_n = self.map[tilemap_n]

    if atlas_n > 0 then
      local tile_pos = self.grid:get_nth_cell_pos(tilemap_n, self.width)
      self.tileset:draw_nth_sub_texture(atlas_n - 1, position + tile_pos, tint)
    end
  end
end

return Tilemap
