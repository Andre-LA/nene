--[[
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

--[[
Gamepad example
]]

-- nene modules
local math = require 'math'

local Nene = require 'nene.core'
local Color = require 'nene.color'
local Vec2 = require 'nene.math.vec2'
local Rect = require 'nene.math.rect'

--[[
Let's create an rect that moves with our gamepad left analog thumbstick and
change to an random color with the bottom right-pad button (A button on xbox controller)
]]
local function game_controller()
  local function get_random_color(prev_color: Color)
    math.randomseed()
    local r: byte, b: byte, g: byte

    local function is_approx_same_color(r: byte, g: byte, b: byte, prev_color: Color): boolean
      return math.abs(r - prev_color.r) < 50 and math.abs(g - prev_color.g) < 50 and math.abs(b - prev_color.b) < 50
    end

    repeat
      r, g, b = math.random(0x00, 0xff), math.random(0x00, 0xff), math.random(0x00, 0xff)
    until not (is_approx_same_color(r, g, b, Color.bg) or is_approx_same_color(r, g, b, prev_color))

    return Color{ r, g, b, 0xff }
  end

  local ok = Nene.init('nene game controller', 800, 600)
  assert(ok, 'error: nene initialization failed')

  local rect: Rect = {
    pos = { x = -40, y = 40 }, 
    size = { x = 80, y = 80 }
  }
  local rect_color = get_random_color()

  repeat
    -- update game state
    Nene.update()

    -- update rect color by pressing FaceButtonDown button
    if Nene.is_gamepad_button_pressed(0, SDL_CONTROLLER_BUTTON_A) then
      rect_color = get_random_color(rect_color)
    end

    -- update rect position by left thumbstick value
    local lx = Nene.get_gamepad_axis(0, SDL_CONTROLLER_AXIS_LEFTX)
    local ly = Nene.get_gamepad_axis(0, SDL_CONTROLLER_AXIS_LEFTY)
    rect = rect:add_pos({lx, -ly})

    -- draw game state
    Nene.render_clear(Color.bg)

    Nene.render_draw_rect(rect, false, rect_color, true)

    Nene.render_present()
  until Nene.should_quit()

  Nene.terminate()
end

game_controller()
