require 'nene'
require 'string'

-- general game settings
local SETTINGS: record{
  winsize: Nene.Math.Vec2,
  racket: record{
    size: Nene.Math.Vec2,
    velocity: integer,
  },
  ball: record{
    size: integer,
    velocity: integer,
  }
} <const> = {
  winsize = { 640, 360 },
  racket = {
    size = { 20, 100 },
    velocity = 4,
  },
  ball = {
    size = 10,
    velocity = 5,
  }
}

-- racket record
local Racket = @record{
  pos_y: integer,
  is_player_one: boolean,
  points: integer,
}

-- return an initialized racket
function Racket.new(is_player_one: boolean): Racket
  return (@Racket){ pos_y = 200, =is_player_one }
end

-- return the rect of the racket
function Racket:get_rect(): Nene.Math.Rect
  return (@Nene.Math.Rect){
    x = self.is_player_one and 20 or SETTINGS.winsize.x - SETTINGS.racket.size.x - 20,
    y = self.pos_y,
    w = SETTINGS.racket.size.x,
    h = SETTINGS.racket.size.y,
  }
end

-- racket's gameplay code
function Racket:update(nene_state: Nene.CoreState)
  local is_up, is_down = false, false

  if self.is_player_one then
    is_up, is_down = nene_state:get_scancode(SDL_SCANCODE_W), nene_state:get_scancode(SDL_SCANCODE_S)
  else
    is_up, is_down = nene_state:get_scancode(SDL_SCANCODE_I), nene_state:get_scancode(SDL_SCANCODE_K)
  end

  if is_up then
    self.pos_y = self.pos_y - SETTINGS.racket.velocity
  end
  if is_down then
    self.pos_y = self.pos_y + SETTINGS.racket.velocity
  end

  if self.pos_y < 0 then
    self.pos_y = 0
  elseif self.pos_y + SETTINGS.racket.size.y > SETTINGS.winsize.y then
    self.pos_y = SETTINGS.winsize.y - SETTINGS.racket.size.y
  end
end

-- draw a racket
function Racket:draw(nene_state: Nene.CoreState)
  nene_state:render_draw_rect(self:get_rect(), false, Nene.Palette.yellow)
end

-- ball record
local Ball = @record{
  pos: Nene.Math.Vec2,
  direction: Nene.Math.Vec2,
}

-- return an initialized ball
function Ball.new()
  return (@Ball){
    pos = { SETTINGS.winsize.x // 2, SETTINGS.winsize.y // 2 },
    direction = { 1, 1 },
  }
end

-- return the ball's rect
function Ball:get_rect(): Nene.Math.Rect
  return (@Nene.Math.Rect){
    x = self.pos.x,
    y = self.pos.y,
    w = SETTINGS.ball.size,
    h = SETTINGS.ball.size,
  }
end

-- ball's gameplay code
function Ball:update(racket_1: *Racket, racket_2: *Racket)
  self.pos = self.pos + self.direction * SETTINGS.ball.velocity
  local ball_rect = self:get_rect()

  -- invert direction when intersecting window corners
  local intersected_window_left = self.pos.x < 0
  local intersected_window_right = self.pos.x + SETTINGS.ball.size > SETTINGS.winsize.x

  if intersected_window_left or intersected_window_right then
    if intersected_window_left then
      racket_2.points = racket_2.points + 1
    else
      racket_1.points = racket_1.points + 1
    end

    self.direction.x = -self.direction.x
  end

  if self.pos.y < 0 or self.pos.y + SETTINGS.ball.size > SETTINGS.winsize.y then
    self.direction.y = -self.direction.y
  end

  -- invert direction when intersecting rackets
  local r1_rect, r2_rect = racket_1:get_rect(), racket_2:get_rect()
  local is_r1_intersecting, is_r2_intersecting = ball_rect:is_rect_intersecting(r1_rect), ball_rect:is_rect_intersecting(r2_rect)

  if is_r1_intersecting or is_r2_intersecting then
    self.direction.x = -self.direction.x
    self.pos.x = is_r1_intersecting and r1_rect.x + r1_rect.w or r2_rect.x - SETTINGS.ball.size
  end
end

function Ball:draw(nene_state: Nene.CoreState)
  nene_state:render_draw_rect(self:get_rect(), false, Nene.Palette.white)
end

-- main code:
local ok, errmsg, nene_state = Nene.init('nene pong example', SETTINGS.winsize.x, SETTINGS.winsize.y)
check(ok, errmsg)

local pl_1, pl_2 = Racket.new(true), Racket.new(false)
local ball = Ball.new()

local ok, errmsg, font = nene_state:load_font('examples/monogram_extended.ttf', 48) -- obtained at: https://datagoblin.itch.io/monogram
check(ok, errmsg)

local r1_text, r2_text = Nene.TextTexture.new(nene_state, '0', Nene.Palette.white, font),
                         Nene.TextTexture.new(nene_state, '0', Nene.Palette.white, font)

local function update_points(pts_text: *Nene.TextTexture, points: integer, prev_points: integer)
  if points == prev_points then
    return
  end

  local pts_str = tostring(points)
  defer pts_str:destroy() end

  pts_text:update_text(nene_state, pts_str, Nene.Palette.white, font)
end

repeat
  nene_state:pool_events()

  local new = nene_state:get_ms_time()

  do -- update step
    local r1_pts_before = pl_1.points
    local r2_pts_before = pl_2.points

    ball:update(pl_1, pl_2)
    pl_1:update(nene_state)
    pl_2:update(nene_state)

    update_points(r1_text, pl_1.points, r1_pts_before)
    update_points(r2_text, pl_2.points, r2_pts_before)
  end

  do -- draw step
    nene_state:render_clear(Nene.Palette.bg)

    pl_1:draw(nene_state)
    pl_2:draw(nene_state)
    ball:draw(nene_state)

    r1_text:draw(nene_state, {10, 0}, Nene.Palette.white)
    r2_text:draw(nene_state, {SETTINGS.winsize.x - r1_text.texture.width - 10, 0}, Nene.Palette.white)

    nene_state:render_present()
  end
until nene_state.quit
