--[[
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

-- This example shows how intersection between two segments works

-- nene modules
local Nene = require 'nene'
local Color = require 'nene.color'
local Rect = require 'nene.math.rect'
local Vec2 = require 'nene.math.vec2'
local Segment = require 'nene.math.segment'
local Intersections = require 'nene.intersections'

-- example
local function example()
  local ok, nene <close> = Nene.init('nene segments intersection', 256, 256)
  assert(ok, 'error: nene initialization failed')

  -- create the points of intersection ab and cd
  local ab: Segment = {
    origin = { -120,  120 },
    ending = {  120, -120 },
  }
  local cd: Segment = {
    origin = {  120,  120 },
    ending = { -120, -120 },
  }

  local controlling_d: boolean

  repeat
    nene:poll_events()

    if nene:get_mouse_button_down(0) then
      controlling_d = not controlling_d
    end

    local mouse_world_pos = nene:screen_pos_to_world_pos(nene.mouse_pos:to_vec2i())

    if controlling_d then
      cd.ending = mouse_world_pos
    else
      ab.ending = mouse_world_pos
    end

    local intersection = Intersections.SegmentWithSegment.get_intersection(ab, cd)

    nene:render_clear(Color.black)

    -- draw ab segment
    nene:render_draw_line(ab.origin, ab.ending, Color.blue)
    -- draw cd segment
    nene:render_draw_line(cd.origin, cd.ending, Color.green)

    -- draw intersection point if an intersection exists
    if intersection.intersected then
      local rect: Rect = { pos = intersection.point:to_vec2i(), size = {3, 3} }
      nene:render_draw_rect(rect, false, Color.red)
    end

    nene:render_present()
  until nene.quit
end

example()
