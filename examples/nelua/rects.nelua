--[[
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

-- nene modules
local Nene = require 'nene.core'
local Color = require 'nene.color'
local Vec2 = require 'nene.math.vec2'
local Rectf = require 'nene.math.rectf'
local Intersections = require 'nene.intersections'
local Collision = require 'nene.collision'

-- example
local function rects()
  local ok = Nene.init('nene rects', 256, 256)
  assert(ok, 'error: nene initialization failed')

  -- declare position and two rects
  local rect_a: Rectf, rect_b: Rectf = { pos = {-32, -48}, size = { 32, 32} }, 
                                       { pos = {-64,  32}, size = {128, 64} }

  repeat
    Nene.update()

    local delta_pos: Vec2
    if Nene.is_scancode_held(SDL_SCANCODE_W) then
      delta_pos.y = 1
    end
    if Nene.is_scancode_held(SDL_SCANCODE_S) then
      delta_pos.y = -1
    end
    if Nene.is_scancode_held(SDL_SCANCODE_A) then
      delta_pos.x = -1
    end
    if Nene.is_scancode_held(SDL_SCANCODE_D) then
      delta_pos.x = 1
    end
    rect_a.pos = rect_a.pos + delta_pos

    local collision = Collision.rectf_with_rectf(rect_a, rect_b, delta_pos)

    if collision.collided then
      rect_a.pos = rect_a.pos + collision.delta
    end
    
    Nene.render_clear(Color.bg)

    Nene.render_draw_rect(rect_a:to_rect(), true, Color.white, true)
    Nene.render_draw_rect(rect_b:to_rect(), true, Color.yellow, true)

    Nene.render_present()
  until Nene.should_quit()

  Nene.terminate()
end

rects()
