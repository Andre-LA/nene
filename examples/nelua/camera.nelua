--[[
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

--[[
In this demo, is presented a basic camera control

Actually, there is no "camera" on Nene, instead, there is a
`Vec2` offset done in all rendering calls, this offset is the
`render_offset` field.

You can modify this field in order to add a basic camera control.
]]

local Core = require 'nene.core'
local Color = require 'nene.color'
local Rect = require 'nene.math.rect'

-- In this example it's showcased how to split your game logic into multiple functions.
local function draw_parallax_grid()
  -- let's draw a grid with parallax effect!

  -- save our original render_offset value
  local original_offset = Core.get_render_offset()

  -- multiply render_offset by half, this is what makes the parallax effect here.
  -- you can read more about parallax on Pedro's tutorial:
  -- https://www.patreon.com/posts/parallax-and-7863658
  Core.set_render_offset(original_offset * 0.5)

  -- draw the grid
  for i = -64, 64 do
    Core.render_draw_line({16 * i, -2048}, {16 * i, 2048}, Color.black, true)
    Core.render_draw_line({-2048, 16 * i}, {2048, 16 * i}, Color.black, true)
  end

  -- at the end of the function, we set the render_offset to the original value
  Core.set_render_offset(original_offset)
end

local function draw_parallax_shadow()
  local original_offset = Core.get_render_offset()
  Core.set_render_offset(Core.get_render_offset() * 0.5)

  -- we can also use defer, so this statement is done at the end of the function
  -- see more here: https://nelua.io/overview/#defer
  defer
    Core.set_render_offset(original_offset)
  end

  -- draw shadow
  Core.render_draw_rect({ {-8, 8}, {16, 16} }, false, {0, 0, 0, 100}, true)
end

-- all the life-cycle of this example is contained in this function
local function camera()
  --[[
  Initialize and test nene initialization and defer it's termination (https://nelua.io/overview/#defer).

  When nene is initialized, you get an ok status which should be asserted;
  the ok status is `true` on initialization success.
  ]]
  local ok = Core.init('nene basic camera', 256, 256)
  assert(ok, 'error: nene initialization failed')

  defer
    Core.terminate()
  end

  -- let's define a rect
  local rect_on_center: Rect = { pos = { -16, 16 }, size = { 32, 32 } }

  repeat
    -- update nene state, always do this on the beg
    Core.update()

    local render_offset = Core.get_render_offset()

    -- modify `render_offset` field in order to get a basic camera control
    if Core.is_scancode_held(Core.Scancode.Right) then
      render_offset.x = render_offset.x + 1
    elseif Core.is_scancode_held(Core.Scancode.Left) then
      render_offset.x = render_offset.x - 1
    end

    if Core.is_scancode_held(Core.Scancode.Up) then
      render_offset.y = render_offset.y - 1
    elseif Core.is_scancode_held(Core.Scancode.Down) then
      render_offset.y = render_offset.y + 1
    end

    Core.set_render_offset(render_offset)

    -- rendering logic --
    Core.render_clear(Color.bg)
    do
      draw_parallax_grid()
      draw_parallax_shadow()

      -- draw the rect, note that rect_on_center is never modified
      Core.render_draw_rect(rect_on_center, false, Color.white, true)
    end

    Core.render_present()
  until Core.should_quit()
end

-- run example
camera()
