-- The tilemap example
-- This example shows how to use the tilemap module.
-- It's recommended see the `texture_atlases` example first.

--[[
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

local Nene = require 'nene.core'
local Rect = require 'nene.math.rect'
local Color = require 'nene.color'
local Texture = require 'nene.texture'
local Tilemap = require 'nene.tilemap'
local Grid = require 'nene.math.grid'
local Vec2 = require 'nene.math.vec2'
local TextureAtlas = require 'nene.texture_atlas'

local map_data: []uint16 = {
  --0                   1
  --0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0, -- 1
    2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2, -- 2
    2,2,3,0,0,0,0,0,0,0,0,0,0,0,2,2, -- 3
    2,2,2,2,2,2,4,4,4,4,4,2,2,2,2,2, -- 4
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, -- 5
}

local function game()
  -- initialize nene
  local ok = Nene.init('nene tilemap', 550, 260)
  assert(ok, 'error: nene initialization failed')

  -- load the tileset texture atlas, more details on `tilesets` example
  local tileset = (do
    local tileset_creation = TextureAtlas.load('resources/img_shapes.png', 2, { cell_size = {32, 32} })
    assert(tileset_creation.created, "error: 'img_shapes.png' could not be loaded")
    in tileset_creation.texture_atlas
  end)

  -- set the tilemap
  local tilemap: Tilemap= {
    -- set the tileset
    =tileset,
    -- our map have 16 tiles per line
    width = 16,
    --[[
    The grid of our map have cells with 32x32 size, without gaps.
    note that this is the size of cells of "tilemap", not tileset,
    this means that you can paint tiles over others inside tilemap,
    and this can be useful on some situations.
    ]]
    grid = { cell_size = { 32, 32 } },
    --[[
    The map, it's a `span` of numbers, and thus it's data points to
    a memory somewhere, thus, it's important to considerate where this
    data it's actually stored because it isn't inside the tilemap.

    For instance, if the code below would be `map = { ... }`, then the map would be
    directly assigned to data.
    This means that the data would be actually stored on the `game` function's stack,
    this means that once the function returns, the data will not be valid anymore (except in case of
    undefined behaviour of course).

    Although this would be not a problem here (because the `game` only returns when the app it's closed),
    it's a better practice to store your data on the top scope as a resource using an data type
    convertible to span (arrays, vector, sequences, anything that's contiguous).

    And that's why the data of tilemap it's declared as an array on the top scope.

    You can read more about how memory works here:
    https://en.wikipedia.org/wiki/Data_segment
    https://en.wikipedia.org/wiki/Call_stack

    You can read more about spans on nelua's overview and it's source code:
    https://nelua.io/overview/#span
    https://github.com/edubart/nelua-lang/blob/master/lib/span.nelua

    TL;TR: The `map` field it's a span of numbers, it's better to declare the
    data at the top scope and then assign `map` to this top scope variable than
    assigning the data directly, otherwise you may get undefined behaviour.
    ]]
    tile_count = #map_data,
  }

  local tilemap_pos: Vec2 = { 20, 20 } 

  do
    local tilemap_size_tiles = tilemap:get_size_in_tiles()
    print('size in tiles of this tilemap:', tilemap_size_tiles.x, tilemap_size_tiles.y)
  end

  repeat
    Nene.update()

    -- let's add some interaction:

    -- up and down arrows will increase and decrease the vertical gap
    if Nene.is_scancode_just_pressed(SDL_SCANCODE_UP) then
      tilemap.grid.gap.y = tilemap.grid.gap.y + 1
    elseif Nene.is_scancode_just_pressed(SDL_SCANCODE_DOWN) then
      tilemap.grid.gap.y = tilemap.grid.gap.y - 1
    end

    -- left and right arrows will increase and decrease the horizontal gap
    if Nene.is_scancode_just_pressed(SDL_SCANCODE_RIGHT) then
      tilemap.grid.gap.x = tilemap.grid.gap.x + 1
    elseif Nene.is_scancode_just_pressed(SDL_SCANCODE_LEFT) then
      tilemap.grid.gap.x = tilemap.grid.gap.x - 1
    end

    -- clear rendering target
    Nene.render_clear(Color.bg)

    -- draw the tilemap with origin at 20,20
    tilemap:draw(tilemap_pos, map_data, #map_data)

    -- let's draw a green rectangle of tilemap
    -- on top tilemap that represents it's size

    Nene.render_draw_rect(
      {
        pos = Nene.screen_point_to_world_pos({20, 20}):to_vec2i(), 
        size = tilemap:get_size()
      },
      true,
      Color.green
    )

    -- present painted rendering target
    Nene.render_present()
  until Nene.should_quit()

  Nene.terminate()
end

game()
