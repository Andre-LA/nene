--[[
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

-- nene modules
local Nene = require 'nene'
local Color = require 'nene.color'
local Vec2 = require 'nene.math.vec2'
local Rect = require 'nene.math.rect'
local Intersections = require 'nene.intersections'
local Collision = require 'nene.collision'

-- example
local function rects()
  local ok, nene <close> = Nene.init('nene rects', 256, 256)
  assert(ok, 'error: nene initialization failed')

  -- declare position and two rects
  local pos: Vec2 = { -32, -48 }
  local rect_a: Rect, rect_b: Rect = { size = { 32, 32} }, 
                                     { pos = {-64, 32}, size = {128, 64} }

  repeat
    nene:poll_events()

    local delta_pos: Vec2
    if nene:get_scancode(Nene.Scancode.W) then
      delta_pos.y = 1
    end
    if nene:get_scancode(Nene.Scancode.S) then
      delta_pos.y = -1
    end
    if nene:get_scancode(Nene.Scancode.A) then
      delta_pos.x = -1
    end
    if nene:get_scancode(Nene.Scancode.D) then
      delta_pos.x = 1
    end
    pos = pos + delta_pos

    local collision = Collision.rect_with_rect(rect_a, rect_b, delta_pos:to_vec2i())

    nene:render_clear(Color.bg)

    nene:render_draw_rect(rect_a, true, Color.white)
    nene:render_draw_rect(rect_b, true, Color.yellow)
    
    if collision.collided then
      pos = pos + collision.delta
    end
    
    rect_a.pos = pos:to_vec2i()

    nene:render_present()
  until nene.quit
end

rects()
