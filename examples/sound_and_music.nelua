--[[
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

local math = require 'math'

local Nene = require 'nene'
local Color = require 'nene.color'
local Sound = require 'nene.audio.sound'
local Music = require 'nene.audio.music'

local function audio_and_music()
  -- nene initialization and deferred de-initialization with to-be-closed variable
  local ok, nene <close> = Nene.init('nene audio and music', 128, 128)
  assert(ok, 'error: nene initialization failed')

  -- sound and music loading and deferred destroyment
  local ok, click <close> = Sound.load('resources/pixelclick.wav')
  assert(ok, 'could not load pixelclick sound')
  local ok, bossa <close> = Music.load('resources/8bit Bossa.ogg')
  assert(ok, 'could not load 8bit Bossa music')

  local mus_volume, click_volume = 1.0, 1.0

  bossa:play()

  repeat
    nene:poll_events()

    if nene:get_scancode_down(Nene.Scancode.P) then
      mus_volume = math.clamp(mus_volume + 0.1, 0.0, 1.0)
      Music.set_volume(mus_volume)
    elseif nene:get_scancode_down(Nene.Scancode.O) then
      mus_volume = math.clamp(mus_volume - 0.1, 0.0, 1.0)
      Music.set_volume(mus_volume)
    end

    if nene:get_scancode_down(Nene.Scancode.M) then
      click_volume = math.clamp(click_volume + 0.1, 0.0, 1.0)
      click:set_volume(click_volume)
    elseif nene:get_scancode_down(Nene.Scancode.N) then
      click_volume = math.clamp(click_volume - 0.1, 0.0, 1.0)
      click:set_volume(click_volume)
    end

    if nene:get_scancode_down(Nene.Scancode.Space) or nene:get_mouse_button_down(0) then
      click:play()
    end

    nene:render_clear(Color.Palette.bg)

    nene:render_present()
  until nene.quit
end

audio_and_music()
