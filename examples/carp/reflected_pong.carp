;; Copyright (c) 2021-present Andr√© Luiz Alvares
;; Nene is licensed under the Zlib license.
;; Please refer to the LICENSE file for details
;; SPDX-License-Identifier: Zlib

(Project.config "search-path" "./bindings/carp")
(Project.config "title" "Reflected_Pong")

(load "nene/core.carp")
(load "nene/math/rectf.carp")
(load "nene/intersections.carp")
(load "nene/font.carp")

;; utils ;;

;; hacky utils while I'm still learning the language ;-;
(defn u8 [v] (Uint8.from-long v))
(defn u16 [v] (Uint16.from-long v))
(defn u32 [v] (Uint32.from-long v))
(defn i16 [v] (Int16.from-long v))
(defn i32 [v] (Int32.from-long v))
(sig clone-vec2i (Fn [(Ref Vec2i)] Vec2i))
(defn clone-vec2i [v] (Vec2i.init @(Vec2i.x v) @(Vec2i.y v)))
(defn clone-vec2 [v] (Vec2.init @(Vec2.x v) @(Vec2.y v)))
(defn clone-font [v] (Font.init @(Font.raw v)))
(defn clone-tex [v] (Texture.init @(Texture.raw v) @(Texture.width v) @(Texture.height v) sdl-textureaccess-static))
(defn empty-static-texture [] (Texture.init NULL (u16 0l) (u16 0l) sdl-textureaccess-static))

;; game properties (constants)
(deftype GameplayState 
  Start
  Running
  Over)

(def PADDLE-SPEED 256.0f)
(def Game-Points 0)
(def Gameplay-State (GameplayState.Start))

;; entities
(deftype Paddle [pos Vec2])
(defmodule Paddle
  (sig new (Fn [] Paddle))
  (defn new [] 
    (Paddle.init (Vec2.init 300f 500f)))

  (sig reset (Fn [(Ref Paddle)] ()))
  (defn reset [paddle]
    (let [pos (Paddle.pos paddle)]
      (ignore-do
        (Vec2.set-x! pos 300f)
        (Vec2.set-y! pos 500f))))

  (sig move (Fn [(Ref Paddle) Float] ()))
  (defn move [paddle dir]
    (let [delta (* PADDLE-SPEED dir)
          pos (Paddle.pos paddle)
          pos_x (Vec2.x pos)
          dt (Core.get-delta-time)]
      (Vec2.set-x! pos (clamp 58.0f 642.0f (+ @pos_x (* dt delta))))))

  (sig rect (Fn [(Ref Paddle)] Rect))
  (defn rect [paddle]
    (let [pos (Vec2.to-vec2i (clone-vec2 (Paddle.pos paddle)))
          size (Vec2i.init (i32 100l) (i32 8l))]
      (Rect.init pos size)))

  (sig rectf (Fn [(Ref Paddle)] Rectf))
  (defn rectf [paddle]
    (let [rect (Paddle.rect paddle)]
      (Rectf.from-rect rect)))

  (sig color (Fn [] Color))
  (defn color []
    (Color.init (u8 0xb3l) (u8 0x9dl) (u8 0xf3l) (u8 0xffl)))

  (sig draw (Fn [(Ref Paddle)] Bool))
  (defn draw [paddle]
    (Core.render-draw-rect (Paddle.rect paddle) false (Paddle.color) false))

  (sig update (Fn [(Ref Paddle)] ()))
  (defn-do update [paddle]
    (cond 
      (Core.is-scancode-held sdl-scancode-left)  (Paddle.move paddle -1.0f)
      (Core.is-scancode-held sdl-scancode-right) (Paddle.move paddle 1.0f)
      () )))

(deftype Ball [pos Vec2, dir Vec2 speed Float])
(defmodule Ball
  (sig new (Fn [] Ball))
  (defn new [] 
    (Ball.init (Vec2.init 392f 200f) (Vec2.init 1.0f -1.0f) 64f))

  (sig reset (Fn [(Ref Ball)] ()))
  (defn reset [ball]
    (let [pos (Ball.pos ball) dir (Ball.dir ball)]
      (ignore-do
        (Ball.set-speed! ball 64f)
        (Vec2.set-x! dir  1f)
        (Vec2.set-y! dir -1f)
        (Vec2.set-x! pos 392f)
        (Vec2.set-y! pos 200f))))

  (sig rect (Fn [(Ref Ball)] Rect))
  (defn rect [ball]
    (let [pos (Vec2.to-vec2i (clone-vec2 (Ball.pos ball)))
          size (Vec2i.init (i32 16l) (i32 16l))]
      (Rect.init pos size)))

  (sig rectf (Fn [(Ref Ball)] Rectf))
  (defn rectf [ball]
    (let [rect (Ball.rect ball)]
      (Rectf.from-rect rect)))

  (sig reflect-x (Fn [(Ref Ball) Float] ()))
  (defn reflect-x [ball limit]
    (let-do [dir (Ball.dir ball)
             pos (Ball.pos ball)    
             dir_x (Vec2.x dir)
             pos_x (Vec2.x pos)]
      (Vec2.set-x! dir (* @dir_x -1.0f))
      (Vec2.set-x! pos (+ limit @dir_x))))

  (sig reflect-y (Fn [(Ref Ball) Float] ()))
  (defn reflect-y [ball limit]
    (let-do [dir (Ball.dir ball)
             pos (Ball.pos ball)    
             dir_y (Vec2.y dir)
             pos_y (Vec2.y pos)]
      (Vec2.set-y! dir (* @dir_y -1.0f))
      (Vec2.set-y! pos (+ limit @dir_y))))
  
  (sig reflect-if-collided-with-walls (Fn [(Ref Ball)] ()))
  (defn reflect-if-collided-with-walls [ball]
    (let [pos (Ball.pos ball)
          pos_x (Vec2.x pos)
          pos_y (Vec2.y pos)]
      (cond 
        (<= @pos_x 58.0f) (Ball.reflect-x ball 58.0f)
        (>= @pos_x 726.0f) (Ball.reflect-x ball 726.0f)
        (cond 
          (<= @pos_y 58.0f) (Ball.reflect-y ball 58.0f)
          (>= @pos_y 526.0f) (set! Gameplay-State (GameplayState.Over))
          () ))))

  (sig reflect-if-collided-with-paddle (Fn [(Ref Ball) (Ref Paddle)] ()))
  (defn reflect-if-collided-with-paddle [ball paddle] 
    (let [paddle-rect (Paddle.rectf paddle)
          ball-rect (Ball.rectf ball)
          is-intersecting (Intersections.is-intersecting-rectf-with-rectf paddle-rect ball-rect)]
      (if is-intersecting 
        (ignore-do
          (Ball.reflect-y ball 484.0f)
          (++ Game-Points))
        ())))

  (sig move (Fn [(Ref Ball)] ()))
  (defn move [ball]
    (let-do [speed (Ball.speed ball)
             pos (Ball.pos ball)
             dir (Ball.dir ball)
             pos_x (Vec2.x pos)
             pos_y (Vec2.y pos)
             dir_x (Vec2.x dir)
             dir_y (Vec2.y dir)
             dt (Core.get-delta-time)
             delta (* @speed dt)]
      (Vec2.set-x! pos (clamp 58.0f 726.0f (+ @pos_x (* delta @dir_x))))
      (Vec2.set-y! pos (clamp 58.0f 726.0f (+ @pos_y (* delta @dir_y))))))

  (sig update (Fn [(Ref Ball) (Ref Paddle)] ()))
  (defn-do update [ball paddle]
    (let [speed (Ball.speed ball)
          dt (Core.get-delta-time)]
      (Ball.set-speed! ball (+ @speed (* 8.0f dt))))
    (Ball.move ball)
    (Ball.reflect-if-collided-with-walls ball)
    (Ball.reflect-if-collided-with-paddle ball paddle))

  (sig color (Fn [] Color))
  (defn color []
    (Color.init (u8 0x76l) (u8 0xccl) (u8 0xe0l) (u8 0xffl)))

  (sig draw (Fn [(Ref Ball)] Bool))
  (defn draw [ball]
    (Core.render-draw-rect (Ball.rect ball) false (Ball.color) false)))

;; game state
(deftype GameState [paddle Paddle
                    ball Ball
                    font Font
                    points-tex Texture
                    info-tex Texture])
(defmodule GameState
  (sig new (Fn [] GameState))
  (defn new []
    (let [points-tex (empty-static-texture)
          info-tex (empty-static-texture)]
      (let [font-creation (Font.load (cstr "resources/monogram_extended.ttf") (i16 48l))
            font (clone-font (FontCreation.font &font-creation))
            _1 (Font.update-text font (Pointer.address &points-tex) (cstr "0 pts") text-quality-solid Color.white (u32 0l))
            _2 (Font.update-text font (Pointer.address &info-tex) (cstr "Press [left] or [right] arrows") text-quality-solid Color.white (u32 0l))
           ] ;; TODO: check font-creation's result to check for a runtime error
      
      (GameState.init (Paddle.new) (Ball.new) font points-tex info-tex ))))

  (sig update-points-tex (Fn [(Ref GameState)] ()))
  (defn update-points-tex [gamestate]
    (let [font (GameState.font gamestate)
          points-tex (GameState.points-tex gamestate)]
      (ignore
        (Font.update-text (clone-font font) (Pointer.address points-tex) (cstr &(String.concat &[(str Game-Points) @" pts"])) text-quality-solid Color.white (u32 0l)))))
      
  (sig update-info-tex (Fn [(Ref GameState) (Ptr CChar)] ()))
  (defn update-info-tex [gamestate text]
    (let [font (GameState.font gamestate)
          info-tex (GameState.info-tex gamestate)]
      (ignore
        (Font.update-text (clone-font font) (Pointer.address info-tex) text text-quality-solid Color.white (u32 0l)))))

  (sig draw (Fn [(Ref GameState)] ()))
  (defn-do draw [gamestate]
    (let [i 0l]
      (while (< i 4l)
        (let [offset (* i 2l)
              offsetx2 (* offset 2l)
              _ (Core.render-draw-rect 
                  (Rect.init
                    (Vec2i.init (i32 (+ offset 50l)) (i32 (+ offset 50l)))
                    (Vec2i.init (i32 (- 700l offsetx2)) (i32 (- 500l offsetx2))))
                  true
                  (Color.init (u8 0xb3l) (u8 0x9dl) (u8 0xf3l) (u8 0xffl))
                  false)
                ] (++ i))))
      (ignore-do
        (let [points-tex (GameState.points-tex gamestate)
              info-tex (GameState.info-tex gamestate)]
          (ignore-do
            (Texture.draw-to-point (clone-tex points-tex) (Rect.zero) (Vec2.init 600f 4f)  false)
            (Texture.draw-to-point (clone-tex info-tex) (Rect.zero) (Vec2.init 130f 80f)  false)))
        (Paddle.draw (GameState.paddle gamestate))
        (Ball.draw (GameState.ball gamestate))))

  (sig reset-game (Fn [(Ref GameState)] ()))
  (defn-do reset-game [gamestate]
    (GameState.update-info-tex gamestate (cstr " "))
    (Ball.reset (Gamestate.ball gamestate))
    (Paddle.reset (Gamestate.paddle gamestate))
    (set! Game-Points 0)
    (set! Gameplay-State (GameplayState.Running)))

  (sig update-start (Fn [(Ref GameState)] ()))
  (defn update-start [gamestate]
    (if (or (Core.is-scancode-pressed sdl-scancode-left) (Core.is-scancode-pressed sdl-scancode-right))
      (GameState.reset-game gamestate)
      ()))

  (sig update-over (Fn [(Ref GameState)] ()))
  (defn-do update-over [gamestate]
    (GameState.update-info-tex gamestate (cstr "Game Over!"))
    (if (Core.is-scancode-pressed sdl-scancode-r)
      (GameState.reset-game gamestate)
      ()))

  (sig update-running (Fn [(Ref GameState)] ()))
  (defn update-running [gamestate]
    (let-do [paddle (GameState.paddle gamestate)
             ball (GameState.ball gamestate)]
      (Paddle.update paddle)
      (Ball.update ball paddle)
      (GameState.update-points-tex gamestate)))
  
  (sig update (Fn [(Ref GameState)] ()))
  (defn update [gamestate]
    (match Gameplay-State
      (GameplayState.Start) (GameState.update-start gamestate)
      (GameplayState.Running) (GameState.update-running gamestate)
      (GameplayState.Over) (GameState.update-over gamestate))))

;; main function
(defn-do main []
  (let-do [_ (Core.init (cstr "Reflected Pong") (u16 800l) (u16 600l) sdl-window-shown)
           gamestate (GameState.new) ]
    (until (Core.should-quit)
      (ignore-do
        (Core.update)
        (GameState.update &gamestate)
        (Core.render-clear (Color.init (u8 0x2Cl) (u8 0x2El) (u8 0x34l) (u8 0xffl)))
        (GameState.draw &gamestate)
        (Core.render-present)))
  (Core.terminate))
  0)
