-- The texture atlases example
-- This example shows how to use the texture atlas module.

--[[
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
]]

local Nene = require 'nene.core'
local TextureAtlas = require 'nene.texture_atlas'
local Color = require 'nene.color'

local function texture_atlas_example()
  -- initialize nene
  local ok = Nene.init('nene texture atlas', 240, 160)
  assert(ok, "nene couldn't be initialized")

  --[[
  First, let's load the "img_shapes" image from "resources", this image contains
  four shapes with two shapes per-line, aligned on a 32x32 grid:

  circle, square,
  right triangle and a isosceles triangle.

  Since there is two shapes per-line, the `width` should be set to two;

  Although it's a 64x64 texture, each shape it's on a cell of an 32x32 grid, thus the
  cell_size of grid should be set to { 32, 32}, there's no gap between cells, thus the
  `gap` field isn't set.
  ]]
  local atlas = (do
    local atlas_creation = TextureAtlas.load('resources/img_shapes.png', 2, { cell_size = {32, 32 }})
    assert(atlas_creation.created, "TextureAtlas texture couldn't be loaded")
    in atlas_creation.texture_atlas
  end)

  -- game loop
  repeat
    -- update nene state
    Nene.update()

    -- clear the rendering target
    Nene.render_clear(Color.bg)

    --[[
    let's first draw the circle sub-texture at middle-top of the screen, the circle
    it's on the first column and the first row, since it's 0-based, the values are
    0 and 0.

    As texture in general, sub-textures are painted from the top-left corner, thus we need
    to subtract 16px (half of the sub-texture width) in order to get really on the center of
    the screen.
    ]]
    atlas.texture:set_color_mod(Color.white)
    atlas:draw_sub_texture({0, 0}, { 120-16, 8 })

    --[[
    Then let's draw some isosceles triangles at the bottom of the screen below.

    Here we used another method: drawing the `n`th sub-texture,
    since the triangle is the 4th sub-texture and it's 0-based, we use `3` value.

    `draw_sub_texture` and `draw_nth_sub_texture` accepts extended options for drawing just as `Texture.draw`, thus
    we can use color tint, angle, rotation center, and finally horizontal and vertical flipping.

    Here the triangle it's drawn with maroon tint with 10 degree rotation from left-bottom.
    ]]
    atlas.texture:set_color_mod({ 134, 0, 0})
    for i = -8, 240+8, 32 do
      -- n position tint angle rotation_center
      atlas:draw_nth_sub_texture_ex(3, {i, 160-32}, 10, { 0.0, 1.0 })
    end

    -- clear present the painted rendering target
    Nene.render_present()
  until Nene.should_quit()

  Nene.terminate()
end

texture_atlas_example()
