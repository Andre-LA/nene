require 'nene.core'
require 'nene.math'
require 'nene.texture'
require 'nene.tilemap'

local function game()
  local win_w <comptime>, win_h <comptime> = 550, 260

  local ok, nene = Nene.init('nene tilemap', win_w, win_h)
  assert(ok, 'error: nene initialization failed')
  defer nene:terminate() end

  local screen = Texture.create_texture(nene, win_w, win_h, nil, SDL_TEXTUREACCESS_TARGET)
  defer screen:destroy() end

  local tileset, ok = Texture.load(nene, 'resources/img_shapes.png')
  assert(ok, "error: 'img_shapes.png' could not be loaded")
  defer tileset:destroy() end

  local tilemap: Tilemap = {
    tilemap_width = 16,
    tileset_width = 2,

    grid = { cell_size = { 32, 32 } },
    map = {
    --0                   1
    --0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
      2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
      2,2,3,0,0,0,0,0,0,0,0,0,0,0,2,2,
      2,2,2,2,2,2,4,4,4,4,4,2,2,2,2,2,
      2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
    }
  }
  defer tilemap:destroy() end

  repeat
    nene:poll_events()

    nene:set_render_target(screen:get())

    nene:render_clear(Color.Palette.bg)

    nene:set_render_target()

    screen:draw(nene)
    tilemap:draw(nene, tileset, {20,20})

    nene:render_present()
  until nene.quit
end

game()
