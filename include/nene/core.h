/*
Copyright (c) 2021-present Andr√© Luiz Alvares
Nene is licensed under the Zlib license.
Please refer to the LICENSE file for details
SPDX-License-Identifier: Zlib
*/

#ifndef NENE_CORE_H
#define NENE_CORE_H

#include <stdbool.h>
#include "SDL_scancode.h"
#include "SDL_blendmode.h"
#include "SDL_gamecontroller.h"
#include "SDL_video.h"
#include "SDL_render.h"
#include "nene/config.h"
#include "nene/math/vec2.h"
#include "nene/math/vec2i.h"
#include "nene/math/rect.h"
#include "nene/color.h"

// Window flags, maps direcly to SDL Window Flags
typedef enum nene_WindowFlags {
  NENE_WINDOW_FLAG_FULLSCREEN = SDL_WINDOW_FULLSCREEN,
  NENE_WINDOW_FLAG_SHOWN = SDL_WINDOW_SHOWN,
  NENE_WINDOW_FLAG_HIDDEN = SDL_WINDOW_HIDDEN,
  NENE_WINDOW_FLAG_BORDERLESS = SDL_WINDOW_BORDERLESS,
  NENE_WINDOW_FLAG_RESIZABLE = SDL_WINDOW_RESIZABLE,
  NENE_WINDOW_FLAG_MINIMIZED = SDL_WINDOW_MINIMIZED,
  NENE_WINDOW_FLAG_MAXIMIZED = SDL_WINDOW_MAXIMIZED,
  NENE_WINDOW_FLAG_MOUSE_GRABBED = SDL_WINDOW_MOUSE_GRABBED,
  NENE_WINDOW_FLAG_INPUT_FOCUS = SDL_WINDOW_INPUT_FOCUS,
  NENE_WINDOW_FLAG_MOUSE_FOCUS = SDL_WINDOW_MOUSE_FOCUS,
  NENE_WINDOW_FLAG_FULLSCREEN_DESKTOP = SDL_WINDOW_FULLSCREEN_DESKTOP,
  NENE_WINDOW_FLAG_ALLOW_HIGH_DPI = SDL_WINDOW_ALLOW_HIGHDPI,
  NENE_WINDOW_FLAG_MOUSE_CAPTURE = SDL_WINDOW_MOUSE_CAPTURE,
  NENE_WINDOW_FLAG_ALWAYS_ON_TOP = SDL_WINDOW_ALWAYS_ON_TOP,
  NENE_WINDOW_FLAG_INPUT_GRABBED = SDL_WINDOW_INPUT_GRABBED,
} nene_WindowFlags;

// Blend mode definitions, maps directly to SDL blend modes.
typedef enum nene_BlendMode {
  NENE_BLEND_MODE_NONE = SDL_BLENDMODE_NONE,
  NENE_BLEND_MODE_BLEND = SDL_BLENDMODE_BLEND,
  NENE_BLEND_MODE_ADD = SDL_BLENDMODE_ADD,
  NENE_BLEND_MODE_MOD = SDL_BLENDMODE_MOD,
  NENE_BLEND_MODE_MUL = SDL_BLENDMODE_MUL,
} nene_BlendMode;

/// Keyboard scancode definitions, maps directly to SDL scancodes.
typedef enum nene_Scancode {
  NENE_SCANCODE_A = SDL_SCANCODE_A,
  NENE_SCANCODE_B = SDL_SCANCODE_B,
  NENE_SCANCODE_C = SDL_SCANCODE_C,
  NENE_SCANCODE_D = SDL_SCANCODE_D,
  NENE_SCANCODE_E = SDL_SCANCODE_E,
  NENE_SCANCODE_F = SDL_SCANCODE_F,
  NENE_SCANCODE_G = SDL_SCANCODE_G,
  NENE_SCANCODE_H = SDL_SCANCODE_H,
  NENE_SCANCODE_I = SDL_SCANCODE_I,
  NENE_SCANCODE_J = SDL_SCANCODE_J,
  NENE_SCANCODE_K = SDL_SCANCODE_K,
  NENE_SCANCODE_L = SDL_SCANCODE_L,
  NENE_SCANCODE_M = SDL_SCANCODE_M,
  NENE_SCANCODE_N = SDL_SCANCODE_N,
  NENE_SCANCODE_O = SDL_SCANCODE_O,
  NENE_SCANCODE_P = SDL_SCANCODE_P,
  NENE_SCANCODE_Q = SDL_SCANCODE_Q,
  NENE_SCANCODE_R = SDL_SCANCODE_R,
  NENE_SCANCODE_S = SDL_SCANCODE_S,
  NENE_SCANCODE_T = SDL_SCANCODE_T,
  NENE_SCANCODE_U = SDL_SCANCODE_U,
  NENE_SCANCODE_V = SDL_SCANCODE_V,
  NENE_SCANCODE_W = SDL_SCANCODE_W,
  NENE_SCANCODE_X = SDL_SCANCODE_X,
  NENE_SCANCODE_Y = SDL_SCANCODE_Y,
  NENE_SCANCODE_Z = SDL_SCANCODE_Z,

  NENE_SCANCODE_DIGIT_1 = SDL_SCANCODE_1,
  NENE_SCANCODE_DIGIT_2 = SDL_SCANCODE_2,
  NENE_SCANCODE_DIGIT_3 = SDL_SCANCODE_3,
  NENE_SCANCODE_DIGIT_4 = SDL_SCANCODE_4,
  NENE_SCANCODE_DIGIT_5 = SDL_SCANCODE_5,
  NENE_SCANCODE_DIGIT_6 = SDL_SCANCODE_6,
  NENE_SCANCODE_DIGIT_7 = SDL_SCANCODE_7,
  NENE_SCANCODE_DIGIT_8 = SDL_SCANCODE_8,
  NENE_SCANCODE_DIGIT_9 = SDL_SCANCODE_9,
  NENE_SCANCODE_DIGIT_0 = SDL_SCANCODE_0,

  NENE_SCANCODE_RETURN = SDL_SCANCODE_RETURN,
  NENE_SCANCODE_ESCAPE = SDL_SCANCODE_ESCAPE,
  NENE_SCANCODE_BACKSPACE = SDL_SCANCODE_BACKSPACE,
  NENE_SCANCODE_TAB = SDL_SCANCODE_TAB,
  NENE_SCANCODE_SPACE = SDL_SCANCODE_SPACE,

  NENE_SCANCODE_MINUS = SDL_SCANCODE_MINUS,
  NENE_SCANCODE_EQUALS = SDL_SCANCODE_EQUALS,
  NENE_SCANCODE_LEFT_BRACKET = SDL_SCANCODE_LEFTBRACKET,
  NENE_SCANCODE_RIGHT_BRACKET = SDL_SCANCODE_RIGHTBRACKET,
  NENE_SCANCODE_BACKSLASH = SDL_SCANCODE_BACKSLASH,
  NENE_SCANCODE_NONUSHASH = SDL_SCANCODE_NONUSHASH,
  NENE_SCANCODE_SEMICOLON = SDL_SCANCODE_SEMICOLON,
  NENE_SCANCODE_APOSTROPHE = SDL_SCANCODE_APOSTROPHE,
  NENE_SCANCODE_GRAVE = SDL_SCANCODE_GRAVE,
  NENE_SCANCODE_COMMA = SDL_SCANCODE_COMMA,
  NENE_SCANCODE_PERIOD = SDL_SCANCODE_PERIOD,
  NENE_SCANCODE_SLASH = SDL_SCANCODE_SLASH,

  NENE_SCANCODE_CAPSLOCK = SDL_SCANCODE_CAPSLOCK,

  NENE_SCANCODE_F1 = SDL_SCANCODE_F1,
  NENE_SCANCODE_F2 = SDL_SCANCODE_F2,
  NENE_SCANCODE_F3 = SDL_SCANCODE_F3,
  NENE_SCANCODE_F4 = SDL_SCANCODE_F4,
  NENE_SCANCODE_F5 = SDL_SCANCODE_F5,
  NENE_SCANCODE_F6 = SDL_SCANCODE_F6,
  NENE_SCANCODE_F7 = SDL_SCANCODE_F7,
  NENE_SCANCODE_F8 = SDL_SCANCODE_F8,
  NENE_SCANCODE_F9 = SDL_SCANCODE_F9,
  NENE_SCANCODE_F10 = SDL_SCANCODE_F10,
  NENE_SCANCODE_F11 = SDL_SCANCODE_F11,
  NENE_SCANCODE_F12 = SDL_SCANCODE_F12,

  NENE_SCANCODE_PRINTSCREEN = SDL_SCANCODE_PRINTSCREEN,
  NENE_SCANCODE_SCROLLLOCK = SDL_SCANCODE_SCROLLLOCK,
  NENE_SCANCODE_PAUSE = SDL_SCANCODE_PAUSE,
  NENE_SCANCODE_INSERT = SDL_SCANCODE_INSERT,
  NENE_SCANCODE_HOME = SDL_SCANCODE_HOME,
  NENE_SCANCODE_PAGE_UP = SDL_SCANCODE_PAGEUP,
  NENE_SCANCODE_DELETE = SDL_SCANCODE_DELETE,
  NENE_SCANCODE_END = SDL_SCANCODE_END,
  NENE_SCANCODE_PAGE_DOWN = SDL_SCANCODE_PAGEDOWN,
  NENE_SCANCODE_RIGHT = SDL_SCANCODE_RIGHT,
  NENE_SCANCODE_LEFT = SDL_SCANCODE_LEFT,
  NENE_SCANCODE_DOWN = SDL_SCANCODE_DOWN,
  NENE_SCANCODE_UP = SDL_SCANCODE_UP,

  NENE_SCANCODE_NUMLOCK_CLEAR = SDL_SCANCODE_NUMLOCKCLEAR,
  NENE_SCANCODE_KP_DIVIDE = SDL_SCANCODE_KP_DIVIDE,
  NENE_SCANCODE_KP_MULTIPLY = SDL_SCANCODE_KP_MULTIPLY,
  NENE_SCANCODE_KP_MINUS = SDL_SCANCODE_KP_MINUS,
  NENE_SCANCODE_KP_PLUS = SDL_SCANCODE_KP_PLUS,
  NENE_SCANCODE_KP_ENTER = SDL_SCANCODE_KP_ENTER,
  NENE_SCANCODE_KP_1 = SDL_SCANCODE_KP_1,
  NENE_SCANCODE_KP_2 = SDL_SCANCODE_KP_2,
  NENE_SCANCODE_KP_3 = SDL_SCANCODE_KP_3,
  NENE_SCANCODE_KP_4 = SDL_SCANCODE_KP_4,
  NENE_SCANCODE_KP_5 = SDL_SCANCODE_KP_5,
  NENE_SCANCODE_KP_6 = SDL_SCANCODE_KP_6,
  NENE_SCANCODE_KP_7 = SDL_SCANCODE_KP_7,
  NENE_SCANCODE_KP_8 = SDL_SCANCODE_KP_8,
  NENE_SCANCODE_KP_9 = SDL_SCANCODE_KP_9,
  NENE_SCANCODE_KP_0 = SDL_SCANCODE_KP_0,
  NENE_SCANCODE_KP_PERIOD = SDL_SCANCODE_KP_PERIOD,

  NENE_SCANCODE_NONUSBACKSLASH = SDL_SCANCODE_NONUSBACKSLASH,
  NENE_SCANCODE_APPLICATION = SDL_SCANCODE_APPLICATION,
  NENE_SCANCODE_POWER = SDL_SCANCODE_POWER,
  NENE_SCANCODE_KP_EQUALS = SDL_SCANCODE_KP_EQUALS,
  NENE_SCANCODE_F13 = SDL_SCANCODE_F13,
  NENE_SCANCODE_F14 = SDL_SCANCODE_F14,
  NENE_SCANCODE_F15 = SDL_SCANCODE_F15,
  NENE_SCANCODE_F16 = SDL_SCANCODE_F16,
  NENE_SCANCODE_F17 = SDL_SCANCODE_F17,
  NENE_SCANCODE_F18 = SDL_SCANCODE_F18,
  NENE_SCANCODE_F19 = SDL_SCANCODE_F19,
  NENE_SCANCODE_F20 = SDL_SCANCODE_F20,
  NENE_SCANCODE_F21 = SDL_SCANCODE_F21,
  NENE_SCANCODE_F22 = SDL_SCANCODE_F22,
  NENE_SCANCODE_F23 = SDL_SCANCODE_F23,
  NENE_SCANCODE_F24 = SDL_SCANCODE_F24,
  NENE_SCANCODE_EXECUTE = SDL_SCANCODE_EXECUTE,
  NENE_SCANCODE_HELP = SDL_SCANCODE_HELP,
  NENE_SCANCODE_MENU = SDL_SCANCODE_MENU,
  NENE_SCANCODE_SELECT = SDL_SCANCODE_SELECT,
  NENE_SCANCODE_STOP = SDL_SCANCODE_STOP,
  NENE_SCANCODE_AGAIN = SDL_SCANCODE_AGAIN,
  NENE_SCANCODE_UNDO = SDL_SCANCODE_UNDO,
  NENE_SCANCODE_CUT = SDL_SCANCODE_CUT,
  NENE_SCANCODE_COPY = SDL_SCANCODE_COPY,
  NENE_SCANCODE_PASTE = SDL_SCANCODE_PASTE,
  NENE_SCANCODE_FIND = SDL_SCANCODE_FIND,
  NENE_SCANCODE_MUTE = SDL_SCANCODE_MUTE,
  NENE_SCANCODE_VOLUME_UP = SDL_SCANCODE_VOLUMEUP,
  NENE_SCANCODE_VOLUME_DOWN = SDL_SCANCODE_VOLUMEDOWN,
  NENE_SCANCODE_KP_COMMA = SDL_SCANCODE_KP_COMMA,
  NENE_SCANCODE_KP_EQUALS_AS400 = SDL_SCANCODE_KP_EQUALSAS400,

  NENE_SCANCODE_INTERNATIONAL1 = SDL_SCANCODE_INTERNATIONAL1,
  NENE_SCANCODE_INTERNATIONAL2 = SDL_SCANCODE_INTERNATIONAL2,
  NENE_SCANCODE_INTERNATIONAL3 = SDL_SCANCODE_INTERNATIONAL3,
  NENE_SCANCODE_INTERNATIONAL4 = SDL_SCANCODE_INTERNATIONAL4,
  NENE_SCANCODE_INTERNATIONAL5 = SDL_SCANCODE_INTERNATIONAL5,
  NENE_SCANCODE_INTERNATIONAL6 = SDL_SCANCODE_INTERNATIONAL6,
  NENE_SCANCODE_INTERNATIONAL7 = SDL_SCANCODE_INTERNATIONAL7,
  NENE_SCANCODE_INTERNATIONAL8 = SDL_SCANCODE_INTERNATIONAL8,
  NENE_SCANCODE_INTERNATIONAL9 = SDL_SCANCODE_INTERNATIONAL9,
  NENE_SCANCODE_LANG1 = SDL_SCANCODE_LANG1,
  NENE_SCANCODE_LANG2 = SDL_SCANCODE_LANG2,
  NENE_SCANCODE_LANG3 = SDL_SCANCODE_LANG3,
  NENE_SCANCODE_LANG4 = SDL_SCANCODE_LANG4,
  NENE_SCANCODE_LANG5 = SDL_SCANCODE_LANG5,
  NENE_SCANCODE_LANG6 = SDL_SCANCODE_LANG6,
  NENE_SCANCODE_LANG7 = SDL_SCANCODE_LANG7,
  NENE_SCANCODE_LANG8 = SDL_SCANCODE_LANG8,
  NENE_SCANCODE_LANG9 = SDL_SCANCODE_LANG9,

  NENE_SCANCODE_ALT_ERASE = SDL_SCANCODE_ALTERASE,
  NENE_SCANCODE_SYS_REQ = SDL_SCANCODE_SYSREQ,
  NENE_SCANCODE_CANCEL = SDL_SCANCODE_CANCEL,
  NENE_SCANCODE_CLEAR = SDL_SCANCODE_CLEAR,
  NENE_SCANCODE_PRIOR = SDL_SCANCODE_PRIOR,
  NENE_SCANCODE_RETURN2 = SDL_SCANCODE_RETURN2,
  NENE_SCANCODE_SEPARATOR = SDL_SCANCODE_SEPARATOR,
  NENE_SCANCODE_OUT = SDL_SCANCODE_OUT,
  NENE_SCANCODE_OPER = SDL_SCANCODE_OPER,
  NENE_SCANCODE_CLEAR_AGAIN = SDL_SCANCODE_CLEARAGAIN,
  NENE_SCANCODE_CR_SEL = SDL_SCANCODE_CRSEL,
  NENE_SCANCODE_EX_SEL = SDL_SCANCODE_EXSEL,

  NENE_SCANCODE_KP_00 = SDL_SCANCODE_KP_00,
  NENE_SCANCODE_KP_000 = SDL_SCANCODE_KP_000,
  NENE_SCANCODE_THOUSANDS_SEPARATOR = SDL_SCANCODE_THOUSANDSSEPARATOR,
  NENE_SCANCODE_DECIMAL_SEPARATOR = SDL_SCANCODE_DECIMALSEPARATOR,
  NENE_SCANCODE_CURRENCY_UNIT = SDL_SCANCODE_CURRENCYUNIT,
  NENE_SCANCODE_CURRENCY_SUB_UNIT = SDL_SCANCODE_CURRENCYSUBUNIT,
  NENE_SCANCODE_KP_LEFT_PAREN = SDL_SCANCODE_KP_LEFTPAREN,
  NENE_SCANCODE_KP_RIGHT_PAREN = SDL_SCANCODE_KP_RIGHTPAREN,
  NENE_SCANCODE_KP_LEFT_BRACE = SDL_SCANCODE_KP_LEFTBRACE,
  NENE_SCANCODE_KP_RIGHT_BRACE = SDL_SCANCODE_KP_RIGHTBRACE,
  NENE_SCANCODE_KP_TAB = SDL_SCANCODE_KP_TAB,
  NENE_SCANCODE_KP_BACKSPACE = SDL_SCANCODE_KP_BACKSPACE,
  NENE_SCANCODE_KP_A = SDL_SCANCODE_KP_A,
  NENE_SCANCODE_KP_B = SDL_SCANCODE_KP_B,
  NENE_SCANCODE_KP_C = SDL_SCANCODE_KP_C,
  NENE_SCANCODE_KP_D = SDL_SCANCODE_KP_D,
  NENE_SCANCODE_KP_E = SDL_SCANCODE_KP_E,
  NENE_SCANCODE_KP_F = SDL_SCANCODE_KP_F,
  NENE_SCANCODE_KP_XOR = SDL_SCANCODE_KP_XOR,
  NENE_SCANCODE_KP_POWER = SDL_SCANCODE_KP_POWER,
  NENE_SCANCODE_KP_PERCENT = SDL_SCANCODE_KP_PERCENT,
  NENE_SCANCODE_KP_LESS = SDL_SCANCODE_KP_LESS,
  NENE_SCANCODE_KP_GREATER = SDL_SCANCODE_KP_GREATER,
  NENE_SCANCODE_KP_AMPERSAND = SDL_SCANCODE_KP_AMPERSAND,
  NENE_SCANCODE_KP_DBL_AMPERSAND = SDL_SCANCODE_KP_DBLAMPERSAND,
  NENE_SCANCODE_KP_VERTICAL_BAR = SDL_SCANCODE_KP_VERTICALBAR,
  NENE_SCANCODE_KP_DBL_VERTICAL_BAR = SDL_SCANCODE_KP_DBLVERTICALBAR,
  NENE_SCANCODE_KP_COLON = SDL_SCANCODE_KP_COLON,
  NENE_SCANCODE_KP_HASH = SDL_SCANCODE_KP_HASH,
  NENE_SCANCODE_KP_SPACE = SDL_SCANCODE_KP_SPACE,
  NENE_SCANCODE_KP_AT = SDL_SCANCODE_KP_AT,
  NENE_SCANCODE_KP_EXCLAM = SDL_SCANCODE_KP_EXCLAM,
  NENE_SCANCODE_KP_MEM_STORE = SDL_SCANCODE_KP_MEMSTORE,
  NENE_SCANCODE_KP_MEM_RECALL = SDL_SCANCODE_KP_MEMRECALL,
  NENE_SCANCODE_KP_MEM_CLEAR = SDL_SCANCODE_KP_MEMCLEAR,
  NENE_SCANCODE_KP_MEM_ADD = SDL_SCANCODE_KP_MEMADD,
  NENE_SCANCODE_KP_MEM_SUBTRACT = SDL_SCANCODE_KP_MEMSUBTRACT,
  NENE_SCANCODE_KP_MEM_MULTIPLY = SDL_SCANCODE_KP_MEMMULTIPLY,
  NENE_SCANCODE_KP_MEM_DIVIDE = SDL_SCANCODE_KP_MEMDIVIDE,
  NENE_SCANCODE_KP_PLUS_MINUS = SDL_SCANCODE_KP_PLUSMINUS,
  NENE_SCANCODE_KP_CLEAR = SDL_SCANCODE_KP_CLEAR,
  NENE_SCANCODE_KP_CLEAR_ENTRY = SDL_SCANCODE_KP_CLEARENTRY,
  NENE_SCANCODE_KP_BINARY = SDL_SCANCODE_KP_BINARY,
  NENE_SCANCODE_KP_OCTAL = SDL_SCANCODE_KP_OCTAL,
  NENE_SCANCODE_KP_DECIMAL = SDL_SCANCODE_KP_DECIMAL,
  NENE_SCANCODE_KP_HEXADECIMAL = SDL_SCANCODE_KP_HEXADECIMAL,

  NENE_SCANCODE_L_CTRL = SDL_SCANCODE_LCTRL,
  NENE_SCANCODE_L_SHIFT = SDL_SCANCODE_LSHIFT,
  NENE_SCANCODE_L_ALT = SDL_SCANCODE_LALT,
  NENE_SCANCODE_L_GUI = SDL_SCANCODE_LGUI,
  NENE_SCANCODE_R_CTRL = SDL_SCANCODE_RCTRL,
  NENE_SCANCODE_R_SHIFT = SDL_SCANCODE_RSHIFT,
  NENE_SCANCODE_R_ALT = SDL_SCANCODE_RALT,
  NENE_SCANCODE_R_GUI = SDL_SCANCODE_RGUI,

  NENE_SCANCODE_MODE = SDL_SCANCODE_MODE,

  NENE_SCANCODE_AUDIO_NEXT = SDL_SCANCODE_AUDIONEXT,
  NENE_SCANCODE_AUDIO_PREV = SDL_SCANCODE_AUDIOPREV,
  NENE_SCANCODE_AUDIO_STOP = SDL_SCANCODE_AUDIOSTOP,
  NENE_SCANCODE_AUDIO_PLAY = SDL_SCANCODE_AUDIOPLAY,
  NENE_SCANCODE_AUDIO_MUTE = SDL_SCANCODE_AUDIOMUTE,
  NENE_SCANCODE_MEDIA_SELECT = SDL_SCANCODE_MEDIASELECT,
  NENE_SCANCODE_WWW = SDL_SCANCODE_WWW,
  NENE_SCANCODE_MAIL = SDL_SCANCODE_MAIL,
  NENE_SCANCODE_CALCULATOR = SDL_SCANCODE_CALCULATOR,
  NENE_SCANCODE_COMPUTER = SDL_SCANCODE_COMPUTER,
  NENE_SCANCODE_AC_SEARCH = SDL_SCANCODE_AC_SEARCH,
  NENE_SCANCODE_AC_HOME = SDL_SCANCODE_AC_HOME,
  NENE_SCANCODE_AC_BACK = SDL_SCANCODE_AC_BACK,
  NENE_SCANCODE_AC_FORWARD = SDL_SCANCODE_AC_FORWARD,
  NENE_SCANCODE_AC_STOP = SDL_SCANCODE_AC_STOP,
  NENE_SCANCODE_AC_REFRESH = SDL_SCANCODE_AC_REFRESH,
  NENE_SCANCODE_AC_BOOKMARKS = SDL_SCANCODE_AC_BOOKMARKS,

  NENE_SCANCODE_BRIGHTNESS_DOWN = SDL_SCANCODE_BRIGHTNESSDOWN,
  NENE_SCANCODE_BRIGHTNESS_UP = SDL_SCANCODE_BRIGHTNESSUP,
  NENE_SCANCODE_DISPLAY_SWITCH = SDL_SCANCODE_DISPLAYSWITCH,
  NENE_SCANCODE_KBDILLUM_TOGGLE = SDL_SCANCODE_KBDILLUMTOGGLE,
  NENE_SCANCODE_KBDILLUM_DOWN = SDL_SCANCODE_KBDILLUMDOWN,
  NENE_SCANCODE_KBDILLUM_UP = SDL_SCANCODE_KBDILLUMUP,
  NENE_SCANCODE_EJECT = SDL_SCANCODE_EJECT,
  NENE_SCANCODE_SLEEP = SDL_SCANCODE_SLEEP,

  NENE_SCANCODE_APP1 = SDL_SCANCODE_APP1,
  NENE_SCANCODE_APP2 = SDL_SCANCODE_APP2,

  NENE_SCANCODE_AUDIO_REWIND = SDL_SCANCODE_AUDIOREWIND,
  NENE_SCANCODE_AUDIO_FAST_FORWARD = SDL_SCANCODE_AUDIOFASTFORWARD,

  NENE_SCANCODE_SOFT_LEFT = SDL_SCANCODE_SOFTLEFT,
  NENE_SCANCODE_SOFT_RIGHT = SDL_SCANCODE_SOFTRIGHT,
  NENE_SCANCODE_CALL = SDL_SCANCODE_CALL,
  NENE_SCANCODE_END_CALL = SDL_SCANCODE_ENDCALL,
} nene_Scancode;

/// Gamepad button definitions, maps directly to SDL game controller buttons,
/// however, it follows the same decision of Raylib on face buttons:
/// 
/// - "Left face buttons" are the digital pad buttons
/// - "right face buttons" are the normal buttons (like Xbox's "B" and PS's "Circle").
/// - "middle buttons" are like the old "Select"/"Start" buttons, nowadays they're
/// called "create"/"options" or "View"/"Menu"
/// 
/// For more information, please check source (SDL2_gamecontroller.h)
typedef enum nene_GamepadButton {
  NENE_GAMEPAD_BUTTON_LEFT_FACE_DOWN = SDL_CONTROLLER_BUTTON_A,
  NENE_GAMEPAD_BUTTON_LEFT_FACE_RIGHT = SDL_CONTROLLER_BUTTON_B,
  NENE_GAMEPAD_BUTTON_LEFT_FACE_LEFT = SDL_CONTROLLER_BUTTON_X,
  NENE_GAMEPAD_BUTTON_LEFT_FACE_UP = SDL_CONTROLLER_BUTTON_Y,
  NENE_GAMEPAD_BUTTON_MIDDLE_LEFT = SDL_CONTROLLER_BUTTON_BACK,
  NENE_GAMEPAD_BUTTON_MIDDLE_CENTER = SDL_CONTROLLER_BUTTON_GUIDE,
  NENE_GAMEPAD_BUTTON_MIDDLE_RIGHT = SDL_CONTROLLER_BUTTON_START,
  NENE_GAMEPAD_BUTTON_LEFT_STICK = SDL_CONTROLLER_BUTTON_LEFTSTICK,
  NENE_GAMEPAD_BUTTON_RIGHT_STICK = SDL_CONTROLLER_BUTTON_RIGHTSTICK,
  NENE_GAMEPAD_BUTTON_LEFT_SHOULDER = SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
  NENE_GAMEPAD_BUTTON_RIGHT_SHOULDER = SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
  NENE_GAMEPAD_BUTTON_RIGHT_FACE_UP = SDL_CONTROLLER_BUTTON_DPAD_UP,
  NENE_GAMEPAD_BUTTON_RIGHT_FACE_DOWN = SDL_CONTROLLER_BUTTON_DPAD_DOWN,
  NENE_GAMEPAD_BUTTON_RIGHT_FACE_LEFT = SDL_CONTROLLER_BUTTON_DPAD_LEFT,
  NENE_GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
  NENE_GAMEPAD_BUTTON_MISC1 = SDL_CONTROLLER_BUTTON_MISC1,
  NENE_GAMEPAD_BUTTON_PADDLE1 = SDL_CONTROLLER_BUTTON_PADDLE1,
  NENE_GAMEPAD_BUTTON_PADDLE2 = SDL_CONTROLLER_BUTTON_PADDLE2,
  NENE_GAMEPAD_BUTTON_PADDLE3 = SDL_CONTROLLER_BUTTON_PADDLE3,
  NENE_GAMEPAD_BUTTON_PADDLE4 = SDL_CONTROLLER_BUTTON_PADDLE4,
  NENE_GAMEPAD_BUTTON_TOUCH_PAD = SDL_CONTROLLER_BUTTON_TOUCHPAD,
} nene_GamepadButton;

/// Gamepad axis definitions, maps directly to SDL game controller axis.
typedef enum nene_GamepadAxis {
  NENE_GAMEPAD_AXIS_LEFT_X = SDL_CONTROLLER_AXIS_LEFTX,
  NENE_GAMEPAD_AXIS_LEFT_Y = SDL_CONTROLLER_AXIS_LEFTY,
  NENE_GAMEPAD_AXIS_RIGHT_X = SDL_CONTROLLER_AXIS_RIGHTX,
  NENE_GAMEPAD_AXIS_RIGHT_Y = SDL_CONTROLLER_AXIS_RIGHTY,
  NENE_GAMEPAD_AXIS_LEFT_TRIGGER = SDL_CONTROLLER_AXIS_TRIGGERLEFT,
  NENE_GAMEPAD_AXIS_RIGHT_TRIGGER = SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
} nene_GamepadAxis;

/// The gamepad state data structure.
typedef struct nene_GamepadState {
  bool active;
  SDL_GameController* game_controller;
  int joystick_id;
  uint32_t prev_buttons;
  uint32_t buttons;
} nene_GamepadState;

/// Alias to the return type of SDL_GetTicks64
typedef uint64_t nene_MilliTime;

/// The core data structure of Nene
typedef struct nene_Core {
  /// `true` when the application will quit, `false` otherwise.
  bool quit;
  /// time since initialization (in milliseconds).
  nene_MilliTime current_time;
  /// frame's delta time (in seconds), that is, how much time passed between previous and current frame.
  float delta_time;
  /// extra offset for rendering.
  nene_Vec2 render_offset;
  /// reference to the window created on initialization; using more than 1 window it's currently a non-goal for Nene.
  SDL_Window* window;
  /// reference to the window's renderer, created on initialization.
  SDL_Renderer* renderer;
  /// store the state of (keyboard) scancode keys in the current frame (`true` means "pressed").
  bool scancode_state[SDL_NUM_SCANCODES];
  /// the state of `scancode_state` on the previous frame.
  bool prev_scancode_state[SDL_NUM_SCANCODES];
  /// store the state of "NENE_CFG_GAMEPAD_COUNT" gamepads (by default, four), you can change this on config.h file.
  nene_GamepadState gamepads_state[NENE_CFG_GAMEPAD_COUNT];
  /// store the mouse position in screen space, relative to window origin (top-left corner).
  nene_Vec2 mouse_pos;  
  /// store the mouse relative motion.
  nene_Vec2 mouse_motion;
  /// store the mouse buttons state as a bitmask where each bit corresponds to a button (0b001 is left-button, 0b010 is middle-button, 0b100 is right-button)
  /// > Note: You can use `nene_Core_get_button` function to get a mouse button state more easily.
  uint32_t mouse_buttons;
  /// the state of `mouse_buttons` on the previous frame.
  uint32_t prev_mouse_buttons;
} nene_Core;

/// The main nene instance, this should never be modified externally, and don't make bindings for it.
/// Use `nene_Core_instance` instead.
extern nene_Core _nene_instance;

// Flag to check if nene it's properly initialized, also don't modify this externally, nor bind it.
extern bool _nene_initialized;

/// outputs an warning message to stderr stream.
void nene_Core_warn(const char fn[], const char msg[]);

/// Returns if nene is initialized.
bool nene_Core_is_initialized(void);

/// Returns the active nene instance, if nene isn't initialized, this will trigger an error.
nene_Core* nene_Core_instance(void);

/// Update's nene's state
void nene_Core_update(void);

bool nene_Core_is_scancode_held(nene_Scancode scancode);

bool nene_Core_is_scancode_pressed(nene_Scancode scancode);

bool nene_Core_is_scancode_released(nene_Scancode scancode);

bool nene_Core_is_mouse_button_held(uint32_t mouse_button);

bool nene_Core_is_mouse_button_pressed(uint32_t mouse_button);

bool nene_Core_is_mouse_button_released(uint32_t mouse_button);

bool nene_Core_is_gamepad_button_held(uint8_t gamepad_index, nene_GamepadButton gamepad_button);

bool nene_Core_is_gamepad_button_pressed(uint8_t gamepad_index, nene_GamepadButton gamepad_button);

bool nene_Core_is_gamepad_button_released(uint8_t gamepad_index, nene_GamepadButton gamepad_button);

float nene_Core_get_gamepad_axis(uint8_t gamepad_index, nene_GamepadAxis gamepad_axis, float deadzone);

bool nene_Core_get_cursor_visibility(void);

bool nene_Core_set_cursor_visibility(bool visible);

float nene_Core_get_delta_time(void);

nene_Vec2i nene_Core_get_window_size(void);

nene_Vec2 nene_Core_get_screen_center(void);

nene_Vec2 nene_Core_get_render_offset(void);

nene_Vec2 nene_Core_screen_point_to_world_pos(nene_Vec2 point);

nene_Vec2 nene_Core_world_pos_to_screen_point(nene_Vec2 pos);

bool nene_Core_set_render_draw_color(nene_Color color);

bool nene_Core_set_render_blend_mode(nene_BlendMode blend_mode);

bool nene_Core_set_render_clip(nene_Rect clip_rect, bool clip_is_screenspace);

// TODO: change to an handle
bool nene_Core_set_render_target(SDL_Texture *raw_target);

void nene_Core_set_render_offset(nene_Vec2 render_offset);

bool nene_Core_render_clear(nene_Color color);

bool nene_Core_render_draw_line(nene_Vec2 origin, nene_Vec2 ending, nene_Color color, bool is_world_pos);

bool nene_Core_render_draw_rect(nene_Rect rect, bool only_lines, nene_Color color, bool is_world_pos);

void nene_Core_render_present(void);

bool nene_Core_init(const char title[], uint16_t width, uint16_t height, nene_WindowFlags flags);

bool nene_Core_should_quit(void);

void nene_Core_terminate(void);

#endif // NENE_CORE_H
