## linklib 'nene'
## cinclude '"nene/intersections.h"'

local Vec2 = require 'nene.math.vec2'
local Vec2i = require 'nene.math.vec2i'
local Rect = require 'nene.math.rect'
local Segment = require 'nene.math.segment'
local Shape = require 'nene.math.shape'

local Intersections = @record{}


-- Rectangle with rectangle intersection.
local RectWithRect <cimport 'nene_IntersectionRectWithRect', nodecl> = @record{
  intersected: boolean,
  intersection: Rect,
}

-- Segment with rectangle intersection.
-- 
-- The intersected "sides" of the rectangle, the first element
-- it's the one that intersects `intersection.origin`, while the
-- second element it's the one that intersects `intersection.ending`.
local SegmentWithRect <cimport 'nene_IntersectionSegmentWithRect', nodecl> = @record{
  count: uint8,
  intersection: Segment,
  intersected_rect_sides: [2]Segment,
}

-- Segment with segment intersection.
local SegmentWithSegment <cimport 'nene_IntersectionSegmentWithSegment', nodecl> = @record{
  intersected: boolean,
  is_parallel: boolean,
  point: Vec2,
  a_intersecting_scalar: float32,
  b_intersecting_scalar: float32,
}

-- Returns if a rect is intersecting with another rect.
function Intersections.is_intersecting_rect_with_rect(a: Rect, b: Rect): boolean <cimport 'nene_Intersections_is_intersecting_rect_with_rect', nodecl> end

-- Returns if a rectangle is intersecting with a point.
function Intersections.is_intersecting_rect_with_point(rect: Rect, point: Vec2i): boolean <cimport 'nene_Intersections_is_intersecting_rect_with_point', nodecl> end

-- Returns "no rect with rect intersection" value.
function RectWithRect.no_intersection(): RectWithRect <cimport 'nene_IntersectionRectWithRect_no_intersection', nodecl> end

-- Returns the intersection rectangle between two rectangles.
function RectWithRect.get_intersection(a: Rect, b: Rect): RectWithRect <cimport 'nene_IntersectionRectWithRect_get_intersection', nodecl> end

-- Returns "no segment with rect intersection" value.
function SegmentWithRect.no_intersection(): SegmentWithRect <cimport 'nene_IntersectionSegmentWithRect_no_intersection', nodecl> end

-- Returns the intersection data between a segment and a rectangle.
function SegmentWithRect.get_intersection(segment: Segment, rect: Rect): SegmentWithRect <cimport 'nene_IntersectionSegmentWithRect_get_intersection', nodecl> end

-- Returns the intersection data between two segments.
function SegmentWithSegment.get_intersection(a: Segment, b: Segment): SegmentWithSegment <cimport 'nene_IntersectionSegmentWithSegment_get_intersection', nodecl> end

local Intersections.RectWithRect = RectWithRect
local Intersections.SegmentWithRect = SegmentWithRect
local Intersections.SegmentWithSegment = SegmentWithSegment

return Intersections
