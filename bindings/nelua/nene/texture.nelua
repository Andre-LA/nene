


local Vec2 = require 'nene.math.vec2'
local Rect = require 'nene.math.rect'
local Color = require 'nene.color'
local Core = require 'nene.core'


local BlendMode: type = @Core.BlendMode


local TextureAccess <cimport 'nene_TextureAccess', nodecl> = @enum{

	Static = 0,

	Streaming = 1,

	Target = 2,
}


local Texture <cimport 'nene_Texture', nodecl> = @record{

	raw: *SDL_Texture,

	width: uint16,

	height: uint16,

	access: TextureAccess,
}


local TextureCreation <cimport 'nene_TextureCreation', nodecl> = @record{

	created: boolean,

	texture: Texture,
}


function Texture.zero(): Texture <cimport 'nene_Texture_zero', nodecl> end



function Texture.copy(texture: *Texture): Texture <cimport 'nene_Texture_copy', nodecl> end



function Texture.destroy(texture: *Texture): void <cimport 'nene_Texture_destroy', nodecl> end



function Texture.set_blend_mode(texture: Texture, blend_mode: BlendMode): boolean <cimport 'nene_Texture_set_blend_mode', nodecl> end



function Texture.set_color_mod(texture: Texture, color: Color): boolean <cimport 'nene_Texture_set_color_mod', nodecl> end


local function nene_Texture_create_with_access(width: uint16, height: uint16, access: TextureAccess): TextureCreation <cimport 'nene_Texture_create_with_access', nodecl> end


function Texture.create_with_access(width: uint16, height: uint16, access: TextureAccess): (boolean, Texture) 
	local maybe_result = nene_Texture_create_with_access(width, height, access)
	return maybe_result.created, maybe_result.texture
end


local function nene_Texture_create(width: uint16, height: uint16): TextureCreation <cimport 'nene_Texture_create', nodecl> end


function Texture.create(width: uint16, height: uint16): (boolean, Texture) 
	local maybe_result = nene_Texture_create(width, height)
	return maybe_result.created, maybe_result.texture
end


local function nene_Texture_load(filepath: cstring): TextureCreation <cimport 'nene_Texture_load', nodecl> end


function Texture.load(filepath: cstring): (boolean, Texture) 
	local maybe_result = nene_Texture_load(filepath)
	return maybe_result.created, maybe_result.texture
end



function Texture.get_full_source_rect(texture: Texture): Rect <cimport 'nene_Texture_get_full_source_rect', nodecl> end



function Texture.draw_to_point(texture: Texture, source: Rect, point: Vec2, is_world_position: boolean): boolean <cimport 'nene_Texture_draw_to_point', nodecl> end



function Texture.draw_to_rect(texture: Texture, source: Rect, destination: Rect): boolean <cimport 'nene_Texture_draw_to_rect', nodecl> end



function Texture.draw_to_point_ex(texture: Texture, source: Rect, point: Vec2, is_world_position: boolean, angle: float64, rotation_center: Vec2, flip_x: boolean, flip_y: boolean): boolean <cimport 'nene_Texture_draw_to_point_ex', nodecl> end



function Texture.draw_to_rect_ex(texture: Texture, source: Rect, destination: Rect, angle: float64, rotation_center: Vec2, flip_x: boolean, flip_y: boolean): boolean <cimport 'nene_Texture_draw_to_rect_ex', nodecl> end






local Texture.TextureAccess: type = TextureAccess
local Texture.TextureCreation: type = TextureCreation

return Texture
