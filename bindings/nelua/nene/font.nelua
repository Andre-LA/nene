## linklib 'nene'
## cinclude '"nene/font.h"'

require 'nene.raw.sdl2_ttf'
local Vec2i = require 'nene.math.vec2i'
local Texture = require 'nene.texture'
local Color = require 'nene.color'

local TextureCreation = @Texture.Creation



local TextQuality <cimport 'nene_TextQuality', nodecl> = @enum(cint){
  Solid = 0,
  Blended = 2,
}


local Font <cimport 'nene_Font', nodecl> = @record{
  raw: *TTF_Font,
}


local FontCreation <cimport 'nene_FontCreation', nodecl> = @record{
  created: boolean,
  font: Font,
}


local GlyphMetrics <cimport 'nene_GlyphMetrics', nodecl> = @record{
  min_x: int16,
  min_y: int16,
  max_x: int16,
  max_y: int16,
}


local GlyphMetricsQuery <cimport 'nene_GlyphMetricsQuery', nodecl> = @record{
  queried: boolean,
  metrics: GlyphMetrics,
}


local TextDimensions <cimport 'nene_TextDimensions', nodecl> = @record{
  calculated: boolean,
  dimensions: Vec2i,
}


function Font.get_raw(font: Font): *TTF_Font <cimport 'nene_Font_get_raw', nodecl> end


local function Font_load(filepath: cstring, pt_size: int16): FontCreation <cimport 'nene_Font_load', nodecl> end


local function Font_render(font: Font, text: cstring, quality: TextQuality, color: Color, wrap_length: uint32): TextureCreation <cimport 'nene_Font_render', nodecl> end


function Font.update_text(font: Font, text_texture: *Texture, text: cstring, quality: TextQuality, color: Color, wrap_length: uint32): boolean <cimport 'nene_Font_update_text', nodecl> end


function Font.get_glyph_metrics(font: Font, glyph: uint32): GlyphMetricsQuery <cimport 'nene_Font_get_glyph_metrics', nodecl> end


function Font.get_height(font: Font): uint16 <cimport 'nene_Font_get_height', nodecl> end


function Font.get_ascent(font: Font): uint16 <cimport 'nene_Font_get_ascent', nodecl> end


function Font.get_descent(font: Font): uint16 <cimport 'nene_Font_get_descent', nodecl> end


function Font.get_line_skip(font: Font): uint16 <cimport 'nene_Font_get_line_skip', nodecl> end


function Font.get_text_dimensions(font: Font, text: cstring): TextDimensions <cimport 'nene_Font_get_text_dimensions', nodecl> end


function Font.is_monospaced(font: Font): boolean <cimport 'nene_Font_is_monospaced', nodecl> end


function Font.destroy(font: *Font): void <cimport 'nene_Font_destroy', nodecl> end

local TextureCreation = @Texture.Creation
local Font.Creation = @FontCreation
local Font.GlyphMetrics = @GlyphMetrics
local Font.GlyphMetricsQuery = @GlyphMetricsQuery
local Font.TextDimensions = @TextDimensions
local Font.TextQuality = @TextQuality

function Font.load(filepath: cstring, pt_size: int16): (boolean, Font)
  local font_creation = Font_load(filepath, pt_size)
  return font_creation.created, font_creation.font
end

function Font.render(font: Font, text: cstring, quality: TextQuality, color: Color, wrap_length: uint32): (boolean, Texture)
  local texture_creation: TextureCreation = Font_render(font, text, quality, color, wrap_length)
  return texture_creation.created, texture_creation.texture
end

function Font:__close()
  self:destroy()
end

return Font
