
-- this contains the bindings for SDL2 and the linking procedures
##[[
linklib 'nene'
linklib 'm'

linklib 'SDL2'
linklib 'SDL2_mixer'
linklib 'SDL2_image'
linklib 'SDL2_ttf'

cinclude 'nene/core.h'
cinclude 'nene/config.h'
cinclude 'nene/texture.h'
cinclude 'nene/font.h'
cinclude 'nene/texture_atlas.h'
cinclude 'nene/audio/music.h'
cinclude 'nene/audio/sound.h'
cinclude 'nene/math/vec2i.h'
cinclude 'nene/math/vec2.h'
cinclude 'nene/math/rect.h'
cinclude 'nene/math/rectf.h'
cinclude 'nene/math/grid.h'
cinclude 'nene/math/segment.h'
cinclude 'nene/math/shape.h'
cinclude 'nene/intersections.h'
cinclude 'nene/collision.h'
cinclude 'nene/animation.h'
cinclude 'nene/tilemap.h'
cinclude 'nene/color.h'
]]

require 'nene.raw.sdl2'
require 'nene.raw.sdl2_mixer'
require 'nene.raw.sdl2_ttf'

local MilliTime: type = @uint64


local Vec2 = require 'nene.math.vec2'
local Vec2i = require 'nene.math.vec2i'
local Rect = require 'nene.math.rect'
local Color = require 'nene.color'





local WindowFlags <cimport 'nene_WindowFlags', nodecl> = @enum{

	Fullscreen = 1,

	Shown = 4,

	Hidden = 8,

	Borderless = 16,

	Resizable = 32,

	Minimized = 64,

	Maximized = 128,

	MouseGrabbed = 256,

	InputFocus = 512,

	MouseFocus = 1024,

	FullscreenDesktop = 4097,

	AllowHighDpi = 8192,

	MouseCapture = 16384,

	AlwaysOnTop = 32768,

	InputGrabbed = 256,
}


local BlendMode <cimport 'nene_BlendMode', nodecl> = @enum{

	None = 0,

	Blend = 1,

	Add = 2,

	Mod = 4,

	Mul = 8,
}

--- Keyboard scancode definitions, maps directly to SDL scancodes.
local Scancode <cimport 'nene_Scancode', nodecl> = @enum{

	A = 4,

	B = 5,

	C = 6,

	D = 7,

	E = 8,

	F = 9,

	G = 10,

	H = 11,

	I = 12,

	J = 13,

	K = 14,

	L = 15,

	M = 16,

	N = 17,

	O = 18,

	P = 19,

	Q = 20,

	R = 21,

	S = 22,

	T = 23,

	U = 24,

	V = 25,

	W = 26,

	X = 27,

	Y = 28,

	Z = 29,

	Digit1 = 30,

	Digit2 = 31,

	Digit3 = 32,

	Digit4 = 33,

	Digit5 = 34,

	Digit6 = 35,

	Digit7 = 36,

	Digit8 = 37,

	Digit9 = 38,

	Digit0 = 39,

	Return = 40,

	Escape = 41,

	Backspace = 42,

	Tab = 43,

	Space = 44,

	Minus = 45,

	Equals = 46,

	LeftBracket = 47,

	RightBracket = 48,

	Backslash = 49,

	Nonushash = 50,

	Semicolon = 51,

	Apostrophe = 52,

	Grave = 53,

	Comma = 54,

	Period = 55,

	Slash = 56,

	Capslock = 57,

	F1 = 58,

	F2 = 59,

	F3 = 60,

	F4 = 61,

	F5 = 62,

	F6 = 63,

	F7 = 64,

	F8 = 65,

	F9 = 66,

	F10 = 67,

	F11 = 68,

	F12 = 69,

	Printscreen = 70,

	Scrolllock = 71,

	Pause = 72,

	Insert = 73,

	Home = 74,

	PageUp = 75,

	Delete = 76,

	End = 77,

	PageDown = 78,

	Right = 79,

	Left = 80,

	Down = 81,

	Up = 82,

	NumlockClear = 83,

	KpDivide = 84,

	KpMultiply = 85,

	KpMinus = 86,

	KpPlus = 87,

	KpEnter = 88,

	Kp1 = 89,

	Kp2 = 90,

	Kp3 = 91,

	Kp4 = 92,

	Kp5 = 93,

	Kp6 = 94,

	Kp7 = 95,

	Kp8 = 96,

	Kp9 = 97,

	Kp0 = 98,

	KpPeriod = 99,

	Nonusbackslash = 100,

	Application = 101,

	Power = 102,

	KpEquals = 103,

	F13 = 104,

	F14 = 105,

	F15 = 106,

	F16 = 107,

	F17 = 108,

	F18 = 109,

	F19 = 110,

	F20 = 111,

	F21 = 112,

	F22 = 113,

	F23 = 114,

	F24 = 115,

	Execute = 116,

	Help = 117,

	Menu = 118,

	Select = 119,

	Stop = 120,

	Again = 121,

	Undo = 122,

	Cut = 123,

	Copy = 124,

	Paste = 125,

	Find = 126,

	Mute = 127,

	VolumeUp = 128,

	VolumeDown = 129,

	KpComma = 133,

	KpEqualsAs400 = 134,

	International1 = 135,

	International2 = 136,

	International3 = 137,

	International4 = 138,

	International5 = 139,

	International6 = 140,

	International7 = 141,

	International8 = 142,

	International9 = 143,

	Lang1 = 144,

	Lang2 = 145,

	Lang3 = 146,

	Lang4 = 147,

	Lang5 = 148,

	Lang6 = 149,

	Lang7 = 150,

	Lang8 = 151,

	Lang9 = 152,

	AltErase = 153,

	SysReq = 154,

	Cancel = 155,

	Clear = 156,

	Prior = 157,

	Return2 = 158,

	Separator = 159,

	Out = 160,

	Oper = 161,

	ClearAgain = 162,

	CrSel = 163,

	ExSel = 164,

	Kp00 = 176,

	Kp000 = 177,

	ThousandsSeparator = 178,

	DecimalSeparator = 179,

	CurrencyUnit = 180,

	CurrencySubUnit = 181,

	KpLeftParen = 182,

	KpRightParen = 183,

	KpLeftBrace = 184,

	KpRightBrace = 185,

	KpTab = 186,

	KpBackspace = 187,

	KpA = 188,

	KpB = 189,

	KpC = 190,

	KpD = 191,

	KpE = 192,

	KpF = 193,

	KpXor = 194,

	KpPower = 195,

	KpPercent = 196,

	KpLess = 197,

	KpGreater = 198,

	KpAmpersand = 199,

	KpDblAmpersand = 200,

	KpVerticalBar = 201,

	KpDblVerticalBar = 202,

	KpColon = 203,

	KpHash = 204,

	KpSpace = 205,

	KpAt = 206,

	KpExclam = 207,

	KpMemStore = 208,

	KpMemRecall = 209,

	KpMemClear = 210,

	KpMemAdd = 211,

	KpMemSubtract = 212,

	KpMemMultiply = 213,

	KpMemDivide = 214,

	KpPlusMinus = 215,

	KpClear = 216,

	KpClearEntry = 217,

	KpBinary = 218,

	KpOctal = 219,

	KpDecimal = 220,

	KpHexadecimal = 221,

	LCtrl = 224,

	LShift = 225,

	LAlt = 226,

	LGui = 227,

	RCtrl = 228,

	RShift = 229,

	RAlt = 230,

	RGui = 231,

	Mode = 257,

	AudioNext = 258,

	AudioPrev = 259,

	AudioStop = 260,

	AudioPlay = 261,

	AudioMute = 262,

	MediaSelect = 263,

	Www = 264,

	Mail = 265,

	Calculator = 266,

	Computer = 267,

	AcSearch = 268,

	AcHome = 269,

	AcBack = 270,

	AcForward = 271,

	AcStop = 272,

	AcRefresh = 273,

	AcBookmarks = 274,

	BrightnessDown = 275,

	BrightnessUp = 276,

	DisplaySwitch = 277,

	KbdillumToggle = 278,

	KbdillumDown = 279,

	KbdillumUp = 280,

	Eject = 281,

	Sleep = 282,

	App1 = 283,

	App2 = 284,

	AudioRewind = 285,

	AudioFastForward = 286,

	SoftLeft = 287,

	SoftRight = 288,

	Call = 289,

	EndCall = 290,
}

--- Gamepad button definitions, maps directly to SDL game controller buttons,
--- however, it follows the same decision of Raylib on face buttons:
--- 
--- - "Left face buttons" are the digital pad buttons
--- - "right face buttons" are the normal buttons (like Xbox's "B" and PS's "Circle").
--- - "middle buttons" are like the old "Select"/"Start" buttons, nowadays they're
--- called "create"/"options" or "View"/"Menu"
--- 
--- For more information, please check source (SDL2_gamecontroller.h)
local GamepadButton <cimport 'nene_GamepadButton', nodecl> = @enum{

	LeftFaceDown = 0,

	LeftFaceRight = 1,

	LeftFaceLeft = 2,

	LeftFaceUp = 3,

	MiddleLeft = 4,

	MiddleCenter = 5,

	MiddleRight = 6,

	LeftStick = 7,

	RightStick = 8,

	LeftShoulder = 9,

	RightShoulder = 10,

	RightFaceUp = 11,

	RightFaceDown = 12,

	RightFaceLeft = 13,

	RightFaceRight = 14,

	Misc1 = 15,

	Paddle1 = 16,

	Paddle2 = 17,

	Paddle3 = 18,

	Paddle4 = 19,

	TouchPad = 20,
}

--- Gamepad axis definitions, maps directly to SDL game controller axis.
local GamepadAxis <cimport 'nene_GamepadAxis', nodecl> = @enum{

	LeftX = 0,

	LeftY = 1,

	RightX = 2,

	RightY = 3,

	LeftTrigger = 4,

	RightTrigger = 5,
}

--- The gamepad state data structure.
local GamepadState <cimport 'nene_GamepadState', nodecl> = @record{

	active: boolean,

	game_controller: *SDL_GameController,

	joystick_id: cint,

	prev_buttons: uint32,
	--- Alias to the return type of SDL_GetTicks64
	buttons: uint32,
}

--- The core data structure of Nene
local Core <cimport 'nene_Core', nodecl> = @record{
	--- `true` when the application will quit, `false` otherwise.
	quit: boolean,
	--- time since initialization (in milliseconds).
	current_time: MilliTime,
	--- frame's delta time (in seconds), that is, how much time passed between previous and current frame.
	delta_time: float32,
	--- extra offset for rendering.
	render_offset: Vec2,
	--- reference to the window created on initialization; using more than 1 window it's currently a non-goal for Nene.
	window: *SDL_Window,
	--- reference to the window's renderer, created on initialization.
	renderer: *SDL_Renderer,
	--- store the state of (keyboard) scancode keys in the current frame (`true` means "pressed").
	scancode_state: [512]boolean,
	--- the state of `scancode_state` on the previous frame.
	prev_scancode_state: [512]boolean,
	--- store the state of "NENE_CFG_GAMEPAD_COUNT" gamepads (by default, four), you can change this on config.h file.
	gamepads_state: [4]GamepadState,
	--- store the mouse position in screen space, relative to window origin (top-left corner).
	mouse_pos: Vec2,
	--- store the mouse relative motion.
	mouse_motion: Vec2,
	--- store the mouse buttons state as a bitmask where each bit corresponds to a button (0b001 is left-button, 0b010 is middle-button, 0b100 is right-button)
	--- > Note: You can use `nene_Core_get_button` function to get a mouse button state more easily.
	mouse_buttons: uint32,
	--- the state of `mouse_buttons` on the previous frame.
	--- 
	--- The main nene instance, this should never be modified externally, and don't make bindings for it.
	--- Use `nene_Core_instance` instead.
	prev_mouse_buttons: uint32,
}

--- outputs an warning message to stderr stream.
function Core.warn(fn: cstring, msg: cstring): void <cimport 'nene_Core_warn', nodecl> end


--- Returns if nene is initialized.
function Core.is_initialized(): boolean <cimport 'nene_Core_is_initialized', nodecl> end


--- Returns the active nene instance, if nene isn't initialized, this will trigger an error.
function Core.instance(): *Core <cimport 'nene_Core_instance', nodecl> end


--- Update's nene's state
function Core.update(): void <cimport 'nene_Core_update', nodecl> end



function Core.is_scancode_held(scancode: Scancode): boolean <cimport 'nene_Core_is_scancode_held', nodecl> end



function Core.is_scancode_pressed(scancode: Scancode): boolean <cimport 'nene_Core_is_scancode_pressed', nodecl> end



function Core.is_scancode_released(scancode: Scancode): boolean <cimport 'nene_Core_is_scancode_released', nodecl> end



function Core.is_mouse_button_held(mouse_button: uint32): boolean <cimport 'nene_Core_is_mouse_button_held', nodecl> end



function Core.is_mouse_button_pressed(mouse_button: uint32): boolean <cimport 'nene_Core_is_mouse_button_pressed', nodecl> end



function Core.is_mouse_button_released(mouse_button: uint32): boolean <cimport 'nene_Core_is_mouse_button_released', nodecl> end



function Core.is_gamepad_button_held(gamepad_index: uint8, gamepad_button: GamepadButton): boolean <cimport 'nene_Core_is_gamepad_button_held', nodecl> end



function Core.is_gamepad_button_pressed(gamepad_index: uint8, gamepad_button: GamepadButton): boolean <cimport 'nene_Core_is_gamepad_button_pressed', nodecl> end



function Core.is_gamepad_button_released(gamepad_index: uint8, gamepad_button: GamepadButton): boolean <cimport 'nene_Core_is_gamepad_button_released', nodecl> end



function Core.get_gamepad_axis(gamepad_index: uint8, gamepad_axis: GamepadAxis, deadzone: float32): float32 <cimport 'nene_Core_get_gamepad_axis', nodecl> end



function Core.get_cursor_visibility(): boolean <cimport 'nene_Core_get_cursor_visibility', nodecl> end



function Core.set_cursor_visibility(visible: boolean): boolean <cimport 'nene_Core_set_cursor_visibility', nodecl> end



function Core.get_delta_time(): float32 <cimport 'nene_Core_get_delta_time', nodecl> end



function Core.get_window_size(): Vec2i <cimport 'nene_Core_get_window_size', nodecl> end



function Core.get_screen_center(): Vec2 <cimport 'nene_Core_get_screen_center', nodecl> end



function Core.get_render_offset(): Vec2 <cimport 'nene_Core_get_render_offset', nodecl> end



function Core.screen_point_to_world_pos(point: Vec2): Vec2 <cimport 'nene_Core_screen_point_to_world_pos', nodecl> end



function Core.world_pos_to_screen_point(pos: Vec2): Vec2 <cimport 'nene_Core_world_pos_to_screen_point', nodecl> end



function Core.set_render_draw_color(color: Color): boolean <cimport 'nene_Core_set_render_draw_color', nodecl> end



function Core.set_render_blend_mode(blend_mode: BlendMode): boolean <cimport 'nene_Core_set_render_blend_mode', nodecl> end



function Core.set_render_clip(clip_rect: Rect, clip_is_screenspace: boolean): boolean <cimport 'nene_Core_set_render_clip', nodecl> end



function Core.set_render_target(raw_target: *SDL_Texture): boolean <cimport 'nene_Core_set_render_target', nodecl> end



function Core.set_render_offset(render_offset: Vec2): void <cimport 'nene_Core_set_render_offset', nodecl> end



function Core.render_clear(color: Color): boolean <cimport 'nene_Core_render_clear', nodecl> end



function Core.render_draw_line(origin: Vec2, ending: Vec2, color: Color, is_world_pos: boolean): boolean <cimport 'nene_Core_render_draw_line', nodecl> end



function Core.render_draw_rect(rect: Rect, only_lines: boolean, color: Color, is_world_pos: boolean): boolean <cimport 'nene_Core_render_draw_rect', nodecl> end



function Core.render_present(): void <cimport 'nene_Core_render_present', nodecl> end



function Core.init(title: cstring, width: uint16, height: uint16, flags: WindowFlags): boolean <cimport 'nene_Core_init', nodecl> end



function Core.should_quit(): boolean <cimport 'nene_Core_should_quit', nodecl> end



function Core.terminate(): void <cimport 'nene_Core_terminate', nodecl> end




local Core.MilliTime: type = @MilliTime 


local Core.WindowFlags: type = WindowFlags
local Core.BlendMode: type = BlendMode
local Core.Scancode: type = Scancode
local Core.GamepadButton: type = GamepadButton
local Core.GamepadAxis: type = GamepadAxis
local Core.GamepadState: type = GamepadState

return Core
