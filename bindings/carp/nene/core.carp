


(load "nene/math/vec2.carp")
(load "nene/math/vec2i.carp")
(load "nene/math/rect.carp")
(load "nene/color.carp")


(load "nene/sdl/sdl2.carp")
(load "nene/sdl/sdl2_image.carp")
(load "nene/sdl/sdl2_mixer.carp")
(load "nene/sdl/sdl2_ttf.carp")

(Project.config "cflag" "-std=c11 -fuse-ld=lld -I libnene/include -I libnene/include/SDL2 -L libnene/lib -L libnene/lib64 -Wl,-rpath='$ORIGIN/libnene/lib64'")
(Project.config "libflag" "-lnene -lSDL2 -lSDL2_image -lSDL2_mixer -lSDL2_ttf")

(Unsafe.preproc (Unsafe.emit-c "#include \"SDL.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"SDL_image.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"SDL_ttf.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"SDL_mixer.h\""))

(Unsafe.preproc (Unsafe.emit-c "#include \"nene/core.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/config.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/texture.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/font.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/texture_atlas.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/audio/music.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/audio/sound.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/math/vec2i.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/math/vec2.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/math/rect.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/math/rectf.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/math/grid.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/math/segment.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/math/shape.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/intersections.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/collision.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/animation.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/tilemap.h\""))
(Unsafe.preproc (Unsafe.emit-c "#include \"nene/color.h\""))


(doc GamepadState "The gamepad state data structure.")
(register-type GamepadState "nene_GamepadState" [active Bool, game_controller (Ptr SDL_GameController), joystick_id Int, prev_buttons Uint32, buttons Uint32])
(doc Core "The core data structure of Nene")
(register-type Core "nene_Core")

(defmodule Core
	(register warn (Fn [(Ptr CChar), (Ptr CChar)] ()) "nene_Core_warn")
	(register is-initialized (Fn [] Bool) "nene_Core_is_initialized")
	(register instance (Fn [] (Ptr Core)) "nene_Core_instance")
	(register update (Fn [] ()) "nene_Core_update")
	(register is-scancode-held (Fn [SDL_Scancode] Bool) "nene_Core_is_scancode_held")
	(register is-scancode-pressed (Fn [SDL_Scancode] Bool) "nene_Core_is_scancode_pressed")
	(register is-scancode-released (Fn [SDL_Scancode] Bool) "nene_Core_is_scancode_released")
	(register is-mouse-button-held (Fn [Uint32] Bool) "nene_Core_is_mouse_button_held")
	(register is-mouse-button-pressed (Fn [Uint32] Bool) "nene_Core_is_mouse_button_pressed")
	(register is-mouse-button-released (Fn [Uint32] Bool) "nene_Core_is_mouse_button_released")
	(register is-gamepad-button-held (Fn [Uint8, SDL_GameControllerButton] Bool) "nene_Core_is_gamepad_button_held")
	(register is-gamepad-button-pressed (Fn [Uint8, SDL_GameControllerButton] Bool) "nene_Core_is_gamepad_button_pressed")
	(register is-gamepad-button-released (Fn [Uint8, SDL_GameControllerButton] Bool) "nene_Core_is_gamepad_button_released")
	(register get-gamepad-axis (Fn [Uint8, SDL_GameControllerAxis, Float] Float) "nene_Core_get_gamepad_axis")
	(register get-cursor-visibility (Fn [] Bool) "nene_Core_get_cursor_visibility")
	(register set-cursor-visibility (Fn [Bool] Bool) "nene_Core_set_cursor_visibility")
	(register get-delta-time (Fn [] Float) "nene_Core_get_delta_time")
	(register get-window-size (Fn [] Vec2i) "nene_Core_get_window_size")
	(register get-screen-center (Fn [] Vec2) "nene_Core_get_screen_center")
	(register get-render-offset (Fn [] Vec2) "nene_Core_get_render_offset")
	(register screen-point-to-world-pos (Fn [Vec2] Vec2) "nene_Core_screen_point_to_world_pos")
	(register world-pos-to-screen-point (Fn [Vec2] Vec2) "nene_Core_world_pos_to_screen_point")
	(register set-render-draw-color (Fn [Color] Bool) "nene_Core_set_render_draw_color")
	(register set-render-blend-mode (Fn [SDL_BlendMode] Bool) "nene_Core_set_render_blend_mode")
	(register set-render-clip (Fn [Rect, Bool] Bool) "nene_Core_set_render_clip")
	(register set-render-target (Fn [(Ptr SDL_Texture)] Bool) "nene_Core_set_render_target")
	(register set-render-offset (Fn [Vec2] ()) "nene_Core_set_render_offset")
	(register render-clear (Fn [Color] Bool) "nene_Core_render_clear")
	(register render-draw-line (Fn [Vec2, Vec2, Color, Bool] Bool) "nene_Core_render_draw_line")
	(register render-draw-rect (Fn [Rect, Bool, Color, Bool] Bool) "nene_Core_render_draw_rect")
	(register render-present (Fn [] ()) "nene_Core_render_present")
	(register init (Fn [(Ptr CChar), Uint16, Uint16, SDL_WindowFlags] Bool) "nene_Core_init")
	(register should-quit (Fn [] Bool) "nene_Core_should_quit")
	(register terminate (Fn [] ()) "nene_Core_terminate")
)



