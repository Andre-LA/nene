


(load "nene/math/vec2.carp")
(load "nene/math/rect.carp")





(doc Rectf "")
(register-type Rectf "nene_Rectf" [pos Vec2, size Vec2])

(defmodule Rectf
	(doc zero "")
	(register zero (Fn [] Rectf) "nene_Rectf_zero")
	(implements zero Rectf.zero)
	(private -private-copy) (hidden -private-copy)
	(register -private-copy (Fn [(Ptr Rectf)] Rectf) "nene_Rectf_copy")
	(doc copy "")
	(sig copy (Fn [(Ref Rectf)] Rectf))
	(defn copy [x]
		(Rectf.-private-copy (the (Ptr Rectf) (Unsafe.coerce x))))
	(implements copy Rectf.copy)
	(sig -private-blit (Fn [Rectf] Rectf))
	(defn- -private-blit [x] (the Rectf x))
	(implements blit Rectf.-private-blit)
	(doc equals "")
	(private -private-equals) (hidden -private-equals)
	(register -private-equals (Fn [Rectf, Rectf] Bool) "nene_Rectf_equals")
	(implements = Rectf.-private-equals)
	(register add-pos (Fn [Rectf, Vec2] Rectf) "nene_Rectf_add_pos")
	(register add-size (Fn [Rectf, Vec2] Rectf) "nene_Rectf_add_size")
	(register get-center (Fn [Rectf] Vec2) "nene_Rectf_get_center")
	(register to-rect (Fn [Rectf] Rect) "nene_Rectf_to_rect")
	(register from-rect (Fn [Rect] Rectf) "nene_Rectf_from_rect")
)



