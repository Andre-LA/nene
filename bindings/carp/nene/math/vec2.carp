


(load "nene/math/vec2i.carp")





(doc Vec2 "2D mathematical vector with `x` and `y` components.")
(register-type Vec2 "nene_Vec2" [x Float, y Float])

(defmodule Vec2
	(register from-vec2i (Fn [Vec2i] Vec2) "nene_Vec2_from_vec2i")
	(register to-vec2i (Fn [Vec2] Vec2i) "nene_Vec2_to_vec2i")
	(doc zero "returns a vector with `0` value on `x` and `y` components.")
	(register zero (Fn [] Vec2) "nene_Vec2_zero")
	(implements zero Vec2.zero)
	(private -private-one) (hidden -private-one)
	(register -private-one (Fn [] Vec2) "nene_Vec2_one")
	(doc one "returns a vector with `1` value on `x` and `y` components.")
	(def one (Vec2.-private-one))
	(private -private-copy) (hidden -private-copy)
	(register -private-copy (Fn [(Ptr Vec2)] Vec2) "nene_Vec2_copy")
	(doc copy "returns a copy of the vector reference.")
	(sig copy (Fn [(Ref Vec2)] Vec2))
	(defn copy [x]
		(Vec2.-private-copy (the (Ptr Vec2) (Unsafe.coerce x))))
	(implements copy Vec2.copy)
	(sig -private-blit (Fn [Vec2] Vec2))
	(defn- -private-blit [x] (the Vec2 x))
	(implements blit Vec2.-private-blit)
	(doc equals "tests equality between `a` and `b` vectors.")
	(private -private-equals) (hidden -private-equals)
	(register -private-equals (Fn [Vec2, Vec2] Bool) "nene_Vec2_equals")
	(implements = Vec2.-private-equals)
	(doc add "returns the sum of two vectors.")
	(private -private-add) (hidden -private-add)
	(register -private-add (Fn [Vec2, Vec2] Vec2) "nene_Vec2_add")
	(implements + Vec2.-private-add)
	(doc sub "returns the difference between two vectors.")
	(private -private-sub) (hidden -private-sub)
	(register -private-sub (Fn [Vec2, Vec2] Vec2) "nene_Vec2_sub")
	(implements - Vec2.-private-sub)
	(private -private-mul) (hidden -private-mul)
	(register -private-mul (Fn [Vec2, Vec2] Vec2) "nene_Vec2_mul")
	(implements * Vec2.-private-mul)
	(register scale (Fn [Vec2, Float] Vec2) "nene_Vec2_scale")
	(doc negate "returns the negation of the `v` vector.")
	(private -private-negate) (hidden -private-negate)
	(register -private-negate (Fn [Vec2] Vec2) "nene_Vec2_negate")
	(implements neg Vec2.-private-negate)
	(register len-sqr (Fn [Vec2] Float) "nene_Vec2_len_sqr")
	(register len (Fn [Vec2] Float) "nene_Vec2_len")
	(register lerp (Fn [Vec2, Vec2, Float] Vec2) "nene_Vec2_lerp")
	(register normalize (Fn [Vec2] Vec2) "nene_Vec2_normalize")
	(register dot (Fn [Vec2, Vec2] Float) "nene_Vec2_dot")
	(register cross (Fn [Vec2, Vec2] Float) "nene_Vec2_cross")
	(register perpendicular (Fn [Vec2] Vec2) "nene_Vec2_perpendicular")
)



